
_sensor_ultrasonic_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000a0e  00000aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0d  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000757  00000000  00000000  00001599  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052e  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004eb  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002d85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  9e:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <system_setup>:
// I/O Function to general setting initial system.
void system_setup(void)
{
		///////////////////////////////    IN SETTING    ///////////////////////////////
		
		DDRB &= ~(1<<ECHO_PIN);    // Set PB.0 as Input, --> Echo
  a6:	20 98       	cbi	0x04, 0	; 4
		DDRD &= ~(1<<DDD2);    // Set PD.2 as Input, change mode cm/inch.
  a8:	52 98       	cbi	0x0a, 2	; 10
		PORTD = BIT_OFF(PORTD,2); 	// Set low for High Impedance PD.2 ->- 10K RESISTOR CONNECTED.
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	8b b9       	out	0x0b, r24	; 11

		///////////////////////////////    OUT SETTING    ///////////////////////////////
		
		DDRC |=  (1<<e) | (1<<f) | (1<<g) | (1<<punto);    //Set PC.0 - PC.3 as output. (e f g h(punto)).
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	87 b9       	out	0x07, r24	; 7
		DDRD |=  (1<<a) | (1<<b) | (1<<c) | (1<<d);   //Set PD.4 - PD.7 as output. (a b c d).
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 6f       	ori	r24, 0xF0	; 240
  bc:	8a b9       	out	0x0a, r24	; 10
		DDRD |=  (1<<TRIGGER_PIN);    //Set PD.3 as output. Trigger.
  be:	53 9a       	sbi	0x0a, 3	; 10
		DDRB |= (1<<d1) | (1<<d2) | (1<<d3) | (1<<d4); //Set PB.1 - PB.4 as output. (D1 D2 D3 D4).
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	8e 61       	ori	r24, 0x1E	; 30
  c4:	84 b9       	out	0x04, r24	; 4
		
		PORTC = BIT_OFF(PORTC,0) | BIT_OFF(PORTC,1) | BIT_OFF(PORTC,2) | BIT_OFF(PORTC,3);
  c6:	38 b1       	in	r19, 0x08	; 8
  c8:	43 2f       	mov	r20, r19
  ca:	4e 7f       	andi	r20, 0xFE	; 254
  cc:	48 b9       	out	0x08, r20	; 8
  ce:	98 b1       	in	r25, 0x08	; 8
  d0:	39 2f       	mov	r19, r25
  d2:	3d 7f       	andi	r19, 0xFD	; 253
  d4:	38 b9       	out	0x08, r19	; 8
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	29 2f       	mov	r18, r25
  da:	2b 7f       	andi	r18, 0xFB	; 251
  dc:	28 b9       	out	0x08, r18	; 8
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	89 2f       	mov	r24, r25
  e2:	87 7f       	andi	r24, 0xF7	; 247
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	34 2b       	or	r19, r20
  e8:	23 2b       	or	r18, r19
  ea:	82 2b       	or	r24, r18
  ec:	88 b9       	out	0x08, r24	; 8
		PORTB = BIT_OFF(PORTB,1) | BIT_OFF(PORTB,2) | BIT_OFF(PORTB,3) | BIT_OFF(PORTB,4) | BIT_OFF(PORTB,0);    // Set ports outs initial value Low '0'.
  ee:	45 b1       	in	r20, 0x05	; 5
  f0:	54 2f       	mov	r21, r20
  f2:	5d 7f       	andi	r21, 0xFD	; 253
  f4:	55 b9       	out	0x05, r21	; 5
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	49 2f       	mov	r20, r25
  fa:	4b 7f       	andi	r20, 0xFB	; 251
  fc:	45 b9       	out	0x05, r20	; 5
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	39 2f       	mov	r19, r25
 102:	37 7f       	andi	r19, 0xF7	; 247
 104:	35 b9       	out	0x05, r19	; 5
 106:	95 b1       	in	r25, 0x05	; 5
 108:	29 2f       	mov	r18, r25
 10a:	2f 7e       	andi	r18, 0xEF	; 239
 10c:	25 b9       	out	0x05, r18	; 5
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	89 2f       	mov	r24, r25
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	85 b9       	out	0x05, r24	; 5
 116:	45 2b       	or	r20, r21
 118:	34 2b       	or	r19, r20
 11a:	23 2b       	or	r18, r19
 11c:	82 2b       	or	r24, r18
 11e:	85 b9       	out	0x05, r24	; 5
		PORTD = BIT_OFF(PORTD,3) | BIT_OFF(PORTD,4) | BIT_OFF(PORTD,5) | BIT_OFF(PORTD,6) | BIT_OFF(PORTD,7);
 120:	4b b1       	in	r20, 0x0b	; 11
 122:	54 2f       	mov	r21, r20
 124:	57 7f       	andi	r21, 0xF7	; 247
 126:	5b b9       	out	0x0b, r21	; 11
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	49 2f       	mov	r20, r25
 12c:	4f 7e       	andi	r20, 0xEF	; 239
 12e:	4b b9       	out	0x0b, r20	; 11
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	39 2f       	mov	r19, r25
 134:	3f 7d       	andi	r19, 0xDF	; 223
 136:	3b b9       	out	0x0b, r19	; 11
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	29 2f       	mov	r18, r25
 13c:	2f 7b       	andi	r18, 0xBF	; 191
 13e:	2b b9       	out	0x0b, r18	; 11
 140:	9b b1       	in	r25, 0x0b	; 11
 142:	89 2f       	mov	r24, r25
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	8b b9       	out	0x0b, r24	; 11
 148:	45 2b       	or	r20, r21
 14a:	34 2b       	or	r19, r20
 14c:	23 2b       	or	r18, r19
 14e:	82 2b       	or	r24, r18
 150:	8b b9       	out	0x0b, r24	; 11
 152:	08 95       	ret

00000154 <timer_0_setup>:
}

void timer_0_setup (void)
{ /////// SETTING TIMER #0 ///////
	TCCR0A |= (1<<WGM01); //Setting CTC MODE TIMER 0.
 154:	84 b5       	in	r24, 0x24	; 36
 156:	82 60       	ori	r24, 0x02	; 2
 158:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02); //Setting Prescaler /256. T=16 uS f= 62.5kHz
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //  Counter register init 0.
 160:	16 bc       	out	0x26, r1	; 38
	OCR0A = 249; // 4 mSec at 62.5kHz.
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	87 bd       	out	0x27, r24	; 39
	
	/////// Interrupts - Timer #0 //////
	
	TIMSK0 |= (1<<OCIE0A);  //Setting the ISR (Interrupts) COMPA vect.
 166:	ee e6       	ldi	r30, 0x6E	; 110
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
	sei (); //Set enable all global interrupts.
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <timer_1_setup>:
}

void timer_1_setup (void)
{  /////// SETTING TIMER #1 ///////
	                                    // Set Normal mode.
	TCCR1B |= (1<<CS11) | (1<<ICES1);  //Setting Prescaler /8. T=0.5 uS f= 2Mhz.
 174:	e1 e8       	ldi	r30, 0x81	; 129
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 64       	ori	r24, 0x42	; 66
 17c:	80 83       	st	Z, r24
	                                  //Set detect trigger on rising edge.
	TCNT1 = 0; //Counter register init 0.
 17e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 182:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 186:	08 95       	ret

00000188 <data_update>:
		}  		
}

// This function is to store the measures on arrays of 10 elements.
void data_update (float data[] , float measure)
{
 188:	fc 01       	movw	r30, r24
 18a:	88 96       	adiw	r24, 0x28	; 40
	uint8_t ind =0;
	
	for ( ind = 0 ; ind < 10  ; ind ++ )
	data[ind] = measure;
 18c:	41 93       	st	Z+, r20
 18e:	51 93       	st	Z+, r21
 190:	61 93       	st	Z+, r22
 192:	71 93       	st	Z+, r23
// This function is to store the measures on arrays of 10 elements.
void data_update (float data[] , float measure)
{
	uint8_t ind =0;
	
	for ( ind = 0 ; ind < 10  ; ind ++ )
 194:	e8 17       	cp	r30, r24
 196:	f9 07       	cpc	r31, r25
 198:	c9 f7       	brne	.-14     	; 0x18c <data_update+0x4>
	data[ind] = measure;
	
	return;
}
 19a:	08 95       	ret

0000019c <data_filtred>:

// This function get average of the measures.
float data_filtred (float data[])
{
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	8c 01       	movw	r16, r24
 1a8:	08 5d       	subi	r16, 0xD8	; 216
 1aa:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t i;
	//uint8_t correct=0;
	float sum_measure=0.000;
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	cb 01       	movw	r24, r22
//	float measure_correct= 0.000;
	
	
	for ( i = 0 ; i < 10  ; i ++ )
	{	
			sum_measure+=data[i];
 1b2:	29 91       	ld	r18, Y+
 1b4:	39 91       	ld	r19, Y+
 1b6:	49 91       	ld	r20, Y+
 1b8:	59 91       	ld	r21, Y+
 1ba:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3>
	//float measure_filtred = 0.000;
	float measure_prom = 0.000;
//	float measure_correct= 0.000;
	
	
	for ( i = 0 ; i < 10  ; i ++ )
 1be:	c0 17       	cp	r28, r16
 1c0:	d1 07       	cpc	r29, r17
 1c2:	b9 f7       	brne	.-18     	; 0x1b2 <data_filtred+0x16>
	{	
			sum_measure+=data[i];
	}
		measure_prom = sum_measure / 10;
		return measure_prom;
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e2       	ldi	r20, 0x20	; 32
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <separate_digit_codes_set>:

// Function to separate in digits the got distance.
void separate_digit_codes_set(uint8_t codes_number[], volatile uint8_t codes_show_digit[], float distance_float)
{
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	8b 01       	movw	r16, r22
 1ee:	ca 01       	movw	r24, r20
 1f0:	b9 01       	movw	r22, r18
	uint8_t digit_0, digit_1, digit_2, digit_3;
	uint16_t distance = distance_float * 10; // multiply by 10 to move decimal point.
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e2       	ldi	r20, 0x20	; 32
 1f8:	51 e4       	ldi	r21, 0x41	; 65
 1fa:	0e 94 89 04 	call	0x912	; 0x912 <__mulsf3>
 1fe:	0e 94 cc 03 	call	0x798	; 0x798 <__fixunssfsi>
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
	digit_0 = distance % 10 ;
	digit_1 = (distance % 100) / 10 ;
	digit_2 = (distance % 1000) / 100 ;
	digit_3 = distance / 1000 ;
	
	codes_show_digit[0] = codes_number[digit_0];
 206:	9b 01       	movw	r18, r22
 208:	ad ec       	ldi	r26, 0xCD	; 205
 20a:	bc ec       	ldi	r27, 0xCC	; 204
 20c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 210:	96 95       	lsr	r25
 212:	87 95       	ror	r24
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	9c 01       	movw	r18, r24
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	82 0f       	add	r24, r18
 230:	93 1f       	adc	r25, r19
 232:	96 01       	movw	r18, r12
 234:	28 1b       	sub	r18, r24
 236:	39 0b       	sbc	r19, r25
 238:	fe 01       	movw	r30, r28
 23a:	e2 0f       	add	r30, r18
 23c:	f1 1d       	adc	r31, r1
 23e:	80 81       	ld	r24, Z
 240:	f8 01       	movw	r30, r16
 242:	80 83       	st	Z, r24
	codes_show_digit[1] = codes_number[digit_1];
 244:	96 01       	movw	r18, r12
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	ab e7       	ldi	r26, 0x7B	; 123
 250:	b4 e1       	ldi	r27, 0x14	; 20
 252:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	44 e6       	ldi	r20, 0x64	; 100
 25c:	48 9f       	mul	r20, r24
 25e:	90 01       	movw	r18, r0
 260:	49 9f       	mul	r20, r25
 262:	30 0d       	add	r19, r0
 264:	11 24       	eor	r1, r1
 266:	c6 01       	movw	r24, r12
 268:	82 1b       	sub	r24, r18
 26a:	93 0b       	sbc	r25, r19
 26c:	9c 01       	movw	r18, r24
 26e:	ad ec       	ldi	r26, 0xCD	; 205
 270:	bc ec       	ldi	r27, 0xCC	; 204
 272:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	fe 01       	movw	r30, r28
 284:	e8 0f       	add	r30, r24
 286:	f1 1d       	adc	r31, r1
 288:	80 81       	ld	r24, Z
 28a:	f8 01       	movw	r30, r16
 28c:	81 83       	std	Z+1, r24	; 0x01
	codes_show_digit[2] = codes_number[digit_2];
 28e:	a6 01       	movw	r20, r12
 290:	56 95       	lsr	r21
 292:	47 95       	ror	r20
 294:	56 95       	lsr	r21
 296:	47 95       	ror	r20
 298:	56 95       	lsr	r21
 29a:	47 95       	ror	r20
 29c:	9a 01       	movw	r18, r20
 29e:	a5 ec       	ldi	r26, 0xC5	; 197
 2a0:	b0 e2       	ldi	r27, 0x20	; 32
 2a2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 2a6:	92 95       	swap	r25
 2a8:	82 95       	swap	r24
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	89 27       	eor	r24, r25
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	89 27       	eor	r24, r25
 2b2:	68 ee       	ldi	r22, 0xE8	; 232
 2b4:	73 e0       	ldi	r23, 0x03	; 3
 2b6:	86 9f       	mul	r24, r22
 2b8:	90 01       	movw	r18, r0
 2ba:	87 9f       	mul	r24, r23
 2bc:	30 0d       	add	r19, r0
 2be:	96 9f       	mul	r25, r22
 2c0:	30 0d       	add	r19, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	c2 1a       	sub	r12, r18
 2c6:	d3 0a       	sbc	r13, r19
 2c8:	96 01       	movw	r18, r12
 2ca:	36 95       	lsr	r19
 2cc:	27 95       	ror	r18
 2ce:	36 95       	lsr	r19
 2d0:	27 95       	ror	r18
 2d2:	ab e7       	ldi	r26, 0x7B	; 123
 2d4:	b4 e1       	ldi	r27, 0x14	; 20
 2d6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	fe 01       	movw	r30, r28
 2e0:	e8 0f       	add	r30, r24
 2e2:	f1 1d       	adc	r31, r1
 2e4:	80 81       	ld	r24, Z
 2e6:	f8 01       	movw	r30, r16
 2e8:	82 83       	std	Z+2, r24	; 0x02
	codes_show_digit[3] = codes_number[digit_3];
 2ea:	9a 01       	movw	r18, r20
 2ec:	a5 ec       	ldi	r26, 0xC5	; 197
 2ee:	b0 e2       	ldi	r27, 0x20	; 32
 2f0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 2f4:	92 95       	swap	r25
 2f6:	82 95       	swap	r24
 2f8:	8f 70       	andi	r24, 0x0F	; 15
 2fa:	89 27       	eor	r24, r25
 2fc:	9f 70       	andi	r25, 0x0F	; 15
 2fe:	89 27       	eor	r24, r25
 300:	c8 0f       	add	r28, r24
 302:	d1 1d       	adc	r29, r1
 304:	88 81       	ld	r24, Y
 306:	83 83       	std	Z+3, r24	; 0x03
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	df 90       	pop	r13
 316:	cf 90       	pop	r12
 318:	08 95       	ret

0000031a <show_number>:

//This function is the principal to show the number on display.
void show_number()
{
	PORTC &= ~(0x0F); // Clear display number and selector display.
 31a:	88 b1       	in	r24, 0x08	; 8
 31c:	80 7f       	andi	r24, 0xF0	; 240
 31e:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~(0xF0);
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(0x1E);
 326:	85 b1       	in	r24, 0x05	; 5
 328:	81 7e       	andi	r24, 0xE1	; 225
 32a:	85 b9       	out	0x05, r24	; 5
	
	if (codes_show_number[2] == 0x3F && codes_show_number[3]==0x3F) //Se
 32c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
 330:	8f 33       	cpi	r24, 0x3F	; 63
 332:	41 f4       	brne	.+16     	; 0x344 <show_number+0x2a>
 334:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x3>
 338:	8f 33       	cpi	r24, 0x3F	; 63
 33a:	21 f4       	brne	.+8      	; 0x344 <show_number+0x2a>
	{
		codes_show_number[2] = 0x00;
 33c:	e2 e1       	ldi	r30, 0x12	; 18
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	12 82       	std	Z+2, r1	; 0x02
		codes_show_number[3] = 0x00;
 342:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if (codes_show_number[3]==0x3F && codes_show_number[2]!=0)
 344:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x3>
 348:	8f 33       	cpi	r24, 0x3F	; 63
 34a:	29 f4       	brne	.+10     	; 0x356 <show_number+0x3c>
 34c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
 350:	81 11       	cpse	r24, r1
	{
		codes_show_number[3] = 0x00;
 352:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x3>
	}
	
	if (codes_show_number[1]<=0x5B && codes_show_number[2]==0x00 && codes_show_number[3]==0x00)
 356:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__data_end+0x1>
 35a:	8c 35       	cpi	r24, 0x5C	; 92
 35c:	78 f4       	brcc	.+30     	; 0x37c <show_number+0x62>
 35e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
 362:	81 11       	cpse	r24, r1
 364:	0b c0       	rjmp	.+22     	; 0x37c <show_number+0x62>
 366:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x3>
 36a:	81 11       	cpse	r24, r1
 36c:	07 c0       	rjmp	.+14     	; 0x37c <show_number+0x62>
	{
		codes_show_number[3] = 0x00;
 36e:	e2 e1       	ldi	r30, 0x12	; 18
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	13 82       	std	Z+3, r1	; 0x03
		codes_show_number[2] = 0x00;
 374:	12 82       	std	Z+2, r1	; 0x02
		codes_show_number[1] = 0x79;
 376:	89 e7       	ldi	r24, 0x79	; 121
 378:	81 83       	std	Z+1, r24	; 0x01
		codes_show_number[0] = 0x79;
 37a:	80 83       	st	Z, r24
	}
	
	if (codes_show_number[3]>=0x66 && codes_show_number[2]!=0x00 && codes_show_number[1]!=0x00 && codes_show_number[0]!=0x00)
 37c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x3>
 380:	86 36       	cpi	r24, 0x66	; 102
 382:	98 f0       	brcs	.+38     	; 0x3aa <show_number+0x90>
 384:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
 388:	88 23       	and	r24, r24
 38a:	79 f0       	breq	.+30     	; 0x3aa <show_number+0x90>
 38c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__data_end+0x1>
 390:	88 23       	and	r24, r24
 392:	59 f0       	breq	.+22     	; 0x3aa <show_number+0x90>
 394:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 398:	88 23       	and	r24, r24
 39a:	39 f0       	breq	.+14     	; 0x3aa <show_number+0x90>
	{
		codes_show_number[3] = 0x00;
 39c:	e2 e1       	ldi	r30, 0x12	; 18
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	13 82       	std	Z+3, r1	; 0x03
		codes_show_number[2] = 0x00;
 3a2:	12 82       	std	Z+2, r1	; 0x02
		codes_show_number[1] = 0x79;
 3a4:	89 e7       	ldi	r24, 0x79	; 121
 3a6:	81 83       	std	Z+1, r24	; 0x01
		codes_show_number[0] = 0x79;
 3a8:	80 83       	st	Z, r24
	}
	
 //Port C the msl bits and port D lsb bits.
	PORTC |= codes_show_number[position_digit] >> 4;  //Turning On the leds that visualizer the numbers on 7 Segments Displays.
 3aa:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <position_digit>
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ee 5e       	subi	r30, 0xEE	; 238
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	98 b1       	in	r25, 0x08	; 8
 3b8:	82 95       	swap	r24
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	89 2b       	or	r24, r25
 3be:	88 b9       	out	0x08, r24	; 8
	PORTD |= codes_show_number[position_digit] << 4;
 3c0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <position_digit>
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	ee 5e       	subi	r30, 0xEE	; 238
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	90 81       	ld	r25, Z
 3cc:	2b b1       	in	r18, 0x0b	; 11
 3ce:	30 e1       	ldi	r19, 0x10	; 16
 3d0:	93 9f       	mul	r25, r19
 3d2:	c0 01       	movw	r24, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	82 2b       	or	r24, r18
 3d8:	8b b9       	out	0x0b, r24	; 11
	BIT_ON(PORTB,(position_digit + 1));        //Switching the selector displays (Transistor Switching).
 3da:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <position_digit>
 3de:	35 b1       	in	r19, 0x05	; 5
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <show_number+0xd2>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	2a 95       	dec	r18
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <show_number+0xce>
 3f0:	83 2b       	or	r24, r19
 3f2:	85 b9       	out	0x05, r24	; 5
	
	 if (position_digit==1)
 3f4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <position_digit>
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	09 f4       	brne	.+2      	; 0x3fe <show_number+0xe4>
	 {                           //Turning On 'dot' display 2 ( right to left).
		 BIT_ON(PORTC,punto);
 3fc:	43 9a       	sbi	0x08, 3	; 8
 3fe:	08 95       	ret

00000400 <__vector_14>:
    }
}

//This interrupt occur when the timer0 get at 4 ms.
ISR (TIMER0_COMPA_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	2f 93       	push	r18
 40c:	3f 93       	push	r19
 40e:	4f 93       	push	r20
 410:	5f 93       	push	r21
 412:	6f 93       	push	r22
 414:	7f 93       	push	r23
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	show_number(codes_show_number, position_digit); 
 422:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <position_digit>
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	82 e1       	ldi	r24, 0x12	; 18
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 8d 01 	call	0x31a	; 0x31a <show_number>
	position_digit++;
 430:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <position_digit>
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <position_digit>
	flag_100_ms++;   
 43a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <flag_100_ms>
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <flag_100_ms>
	flag_1_sec++;
 444:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag_1_sec>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag_1_sec>
	
		if (position_digit>=4)
 44e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <position_digit>
 452:	84 30       	cpi	r24, 0x04	; 4
 454:	10 f0       	brcs	.+4      	; 0x45a <__vector_14+0x5a>
		{
			position_digit=0;
 456:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <position_digit>
		}  		
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <shooter_trigger>:
	 
}
// Function to shooter the  signal trigger.
void shooter_trigger (void)  
{
	BIT_ON(PORTD, TRIGGER_PIN);
 47c:	5b 9a       	sbi	0x0b, 3	; 11
	__builtin_avr_delay_cycles(DELAY_10_uSEC);
 47e:	85 e3       	ldi	r24, 0x35	; 53
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <shooter_trigger+0x4>
 484:	00 00       	nop
	BIT_OFF(PORTD, TRIGGER_PIN);
 486:	5b 98       	cbi	0x0b, 3	; 11
 488:	08 95       	ret

0000048a <main>:
	0x00, 0x00, 0x00, 0x00
};


int main(void)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	e9 97       	sbiw	r28, 0x39	; 57
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
    // Initial System.
    system_setup();
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <system_setup>
	timer_0_setup();
 4a2:	0e 94 aa 00 	call	0x154	; 0x154 <timer_0_setup>
    timer_1_setup();
 4a6:	0e 94 ba 00 	call	0x174	; 0x174 <timer_1_setup>
	
   ////////// VARIABLES LOCALS/////////
    uint8_t codes_digits[17] =
 4aa:	81 e1       	ldi	r24, 0x11	; 17
 4ac:	e0 e0       	ldi	r30, 0x00	; 0
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	de 01       	movw	r26, r28
 4b2:	11 96       	adiw	r26, 0x01	; 1
 4b4:	01 90       	ld	r0, Z+
 4b6:	0d 92       	st	X+, r0
 4b8:	8a 95       	dec	r24
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x2a>
	    0x7F, 0x6F, 0x77, 0x7C,
	    0x39, 0x5E, 0x79, 0x71,
		0x00
    };
	
	 float data_measure[10] = { }; // Variable to store a 10 measure.
 4bc:	fe 01       	movw	r30, r28
 4be:	72 96       	adiw	r30, 0x12	; 18
 4c0:	88 e2       	ldi	r24, 0x28	; 40
 4c2:	df 01       	movw	r26, r30
 4c4:	1d 92       	st	X+, r1
 4c6:	8a 95       	dec	r24
 4c8:	e9 f7       	brne	.-6      	; 0x4c4 <main+0x3a>
	  
	 float time_echo_rising = 0.000;
	 float time_echo_falling = 0.000;
	 float echo = 0.000;
 4ca:	81 2c       	mov	r8, r1
 4cc:	91 2c       	mov	r9, r1
 4ce:	54 01       	movw	r10, r8
		0x00
    };
	
	 float data_measure[10] = { }; // Variable to store a 10 measure.
	  
	 float time_echo_rising = 0.000;
 4d0:	24 01       	movw	r4, r8
 4d2:	35 01       	movw	r6, r10
    while (1) 
    {
		if (flag_100_ms >=25) // 25 count is equivalent at 100 msec @ 4ms counter.
		{
			flag_100_ms = 0;
			flag_100_ms_status = true; //Flag to know when the clock has reached 100 ms.
 4d4:	33 24       	eor	r3, r3
 4d6:	33 94       	inc	r3
		{
			flag_100_ms_status = false;
			
			shooter_trigger(); //This shoot a trigger signal.
			
			TCNT1 = 0; //Resetting the count timer to 0.
 4d8:	0f 2e       	mov	r0, r31
 4da:	f4 e8       	ldi	r31, 0x84	; 132
 4dc:	ef 2e       	mov	r14, r31
 4de:	f1 2c       	mov	r15, r1
 4e0:	f0 2d       	mov	r31, r0
			
			if (TIFR1 & (1<<ICF1)) // Checking if a capture event has occurred.
			{
				TIFR1 |= (1<<ICF1); //Resetting the capture event flag. 1 -> 0.
				
				if (TCCR1B & (1<<ICES1)) //Checking if a rising edge is captured.
 4e2:	01 e8       	ldi	r16, 0x81	; 129
 4e4:	10 e0       	ldi	r17, 0x00	; 0
					 time_echo_rising = ICR1; // Save or store the exact count timer value when the echo signal is up.
					 TCCR1B &= ~(1 << ICES1); //Setting to capture a falling edge.
				}
				else if ((TCCR1B & (1<<ICES1)) == 0 ) //Checking if a falling edge is captured.
				{
					time_echo_falling = ICR1; //Save or store the exact count timer value when the echo signal is down.
 4e6:	0f 2e       	mov	r0, r31
 4e8:	f6 e8       	ldi	r31, 0x86	; 134
 4ea:	cf 2e       	mov	r12, r31
 4ec:	d1 2c       	mov	r13, r1
 4ee:	f0 2d       	mov	r31, r0
	 float measure_distance = 0.000; // Variable to store the distance formula result.
	

    while (1) 
    {
		if (flag_100_ms >=25) // 25 count is equivalent at 100 msec @ 4ms counter.
 4f0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <flag_100_ms>
 4f4:	89 31       	cpi	r24, 0x19	; 25
 4f6:	20 f0       	brcs	.+8      	; 0x500 <main+0x76>
		{
			flag_100_ms = 0;
 4f8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <flag_100_ms>
			flag_100_ms_status = true; //Flag to know when the clock has reached 100 ms.
 4fc:	30 92 17 01 	sts	0x0117, r3	; 0x800117 <flag_100_ms_status>
		}
		if (flag_1_sec >=250) // 250 count is equivalent at 1 sec @ 4ms counter.
 500:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag_1_sec>
 504:	8a 3f       	cpi	r24, 0xFA	; 250
 506:	20 f0       	brcs	.+8      	; 0x510 <main+0x86>
		{
			flag_1_sec = 0;
 508:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <flag_1_sec>
			flag_1_sec_status = true; //Flag to know when the clock has reached 1 sec.
 50c:	30 92 16 01 	sts	0x0116, r3	; 0x800116 <flag_1_sec_status>
		}
		
		if ( flag_100_ms_status )  // Every 100 ms, execute code below . The code below is to do the processor to shoot a trigger and get a echo signals.
 510:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <flag_100_ms_status>
 514:	88 23       	and	r24, r24
 516:	09 f4       	brne	.+2      	; 0x51a <main+0x90>
 518:	4c c0       	rjmp	.+152    	; 0x5b2 <main+0x128>
		{
			flag_100_ms_status = false;
 51a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <flag_100_ms_status>
			
			shooter_trigger(); //This shoot a trigger signal.
 51e:	0e 94 3e 02 	call	0x47c	; 0x47c <shooter_trigger>
			
			TCNT1 = 0; //Resetting the count timer to 0.
 522:	f7 01       	movw	r30, r14
 524:	11 82       	std	Z+1, r1	; 0x01
 526:	10 82       	st	Z, r1
			
			if (TIFR1 & (1<<ICF1)) // Checking if a capture event has occurred.
 528:	b5 9b       	sbis	0x16, 5	; 22
 52a:	27 c0       	rjmp	.+78     	; 0x57a <main+0xf0>
			{
				TIFR1 |= (1<<ICF1); //Resetting the capture event flag. 1 -> 0.
 52c:	b5 9a       	sbi	0x16, 5	; 22
				
				if (TCCR1B & (1<<ICES1)) //Checking if a rising edge is captured.
 52e:	d8 01       	movw	r26, r16
 530:	8c 91       	ld	r24, X
 532:	86 ff       	sbrs	r24, 6
 534:	0e c0       	rjmp	.+28     	; 0x552 <main+0xc8>
				{
					 time_echo_rising = ICR1; // Save or store the exact count timer value when the echo signal is up.
 536:	f6 01       	movw	r30, r12
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__floatunsisf>
 544:	2b 01       	movw	r4, r22
 546:	3c 01       	movw	r6, r24
					 TCCR1B &= ~(1 << ICES1); //Setting to capture a falling edge.
 548:	d8 01       	movw	r26, r16
 54a:	8c 91       	ld	r24, X
 54c:	8f 7b       	andi	r24, 0xBF	; 191
 54e:	8c 93       	st	X, r24
 550:	14 c0       	rjmp	.+40     	; 0x57a <main+0xf0>
				}
				else if ((TCCR1B & (1<<ICES1)) == 0 ) //Checking if a falling edge is captured.
 552:	f8 01       	movw	r30, r16
 554:	80 81       	ld	r24, Z
 556:	86 fd       	sbrc	r24, 6
 558:	10 c0       	rjmp	.+32     	; 0x57a <main+0xf0>
				{
					time_echo_falling = ICR1; //Save or store the exact count timer value when the echo signal is down.
 55a:	d6 01       	movw	r26, r12
 55c:	6d 91       	ld	r22, X+
 55e:	7c 91       	ld	r23, X
					TCCR1B |= (1 << ICES1); //Setting to capture a rising edge.
 560:	80 81       	ld	r24, Z
 562:	80 64       	ori	r24, 0x40	; 64
 564:	80 83       	st	Z, r24
					
					echo = (time_echo_falling - time_echo_rising); // Get the high value of the signal echo.
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__floatunsisf>
 56e:	a3 01       	movw	r20, r6
 570:	92 01       	movw	r18, r4
 572:	0e 94 ed 02 	call	0x5da	; 0x5da <__subsf3>
 576:	4b 01       	movw	r8, r22
 578:	5c 01       	movw	r10, r24
				}
			}
			
			measure_distance = (echo * 0.0000005 * 17150); //Convert to measure (distance) in cm.
 57a:	2d eb       	ldi	r18, 0xBD	; 189
 57c:	37 e3       	ldi	r19, 0x37	; 55
 57e:	46 e0       	ldi	r20, 0x06	; 6
 580:	55 e3       	ldi	r21, 0x35	; 53
 582:	c5 01       	movw	r24, r10
 584:	b4 01       	movw	r22, r8
 586:	0e 94 89 04 	call	0x912	; 0x912 <__mulsf3>
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	3c ef       	ldi	r19, 0xFC	; 252
 58e:	45 e8       	ldi	r20, 0x85	; 133
 590:	56 e4       	ldi	r21, 0x46	; 70
 592:	0e 94 89 04 	call	0x912	; 0x912 <__mulsf3>
			
			if ((PIND & (1 << PIND2)) !=0) // If the button is pressed, convert the measure to inches.
 596:	4a 9b       	sbis	0x09, 2	; 9
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <main+0x11c>
			{
				measure_distance = (measure_distance / 2.54) ;
 59a:	2c e5       	ldi	r18, 0x5C	; 92
 59c:	3f e8       	ldi	r19, 0x8F	; 143
 59e:	42 e2       	ldi	r20, 0x22	; 34
 5a0:	50 e4       	ldi	r21, 0x40	; 64
 5a2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
			}
			
			data_update(data_measure,measure_distance);  // store 10 measure, every 100 ms.
 5a6:	ab 01       	movw	r20, r22
 5a8:	bc 01       	movw	r22, r24
 5aa:	ce 01       	movw	r24, r28
 5ac:	42 96       	adiw	r24, 0x12	; 18
 5ae:	0e 94 c4 00 	call	0x188	; 0x188 <data_update>
		}
		
		if (flag_1_sec_status) // Every one second, this is true.
 5b2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <flag_1_sec_status>
 5b6:	88 23       	and	r24, r24
 5b8:	09 f4       	brne	.+2      	; 0x5bc <main+0x132>
 5ba:	9a cf       	rjmp	.-204    	; 0x4f0 <main+0x66>
		{                                      
			flag_1_sec_status=false; 
 5bc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <flag_1_sec_status>
		    measure_distance = data_filtred(data_measure); // get average of the measures. (filter)
 5c0:	ce 01       	movw	r24, r28
 5c2:	42 96       	adiw	r24, 0x12	; 18
 5c4:	0e 94 ce 00 	call	0x19c	; 0x19c <data_filtred>
 5c8:	9b 01       	movw	r18, r22
 5ca:	ac 01       	movw	r20, r24
		    separate_digit_codes_set(codes_digits, codes_show_number, measure_distance); // Call the function to separate show digits in code to 7 segments display.
 5cc:	62 e1       	ldi	r22, 0x12	; 18
 5ce:	71 e0       	ldi	r23, 0x01	; 1
 5d0:	ce 01       	movw	r24, r28
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	0e 94 ed 00 	call	0x1da	; 0x1da <separate_digit_codes_set>
 5d8:	8b cf       	rjmp	.-234    	; 0x4f0 <main+0x66>

000005da <__subsf3>:
 5da:	50 58       	subi	r21, 0x80	; 128

000005dc <__addsf3>:
 5dc:	bb 27       	eor	r27, r27
 5de:	aa 27       	eor	r26, r26
 5e0:	0e 94 05 03 	call	0x60a	; 0x60a <__addsf3x>
 5e4:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_round>
 5e8:	0e 94 41 04 	call	0x882	; 0x882 <__fp_pscA>
 5ec:	38 f0       	brcs	.+14     	; 0x5fc <__addsf3+0x20>
 5ee:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscB>
 5f2:	20 f0       	brcs	.+8      	; 0x5fc <__addsf3+0x20>
 5f4:	39 f4       	brne	.+14     	; 0x604 <__addsf3+0x28>
 5f6:	9f 3f       	cpi	r25, 0xFF	; 255
 5f8:	19 f4       	brne	.+6      	; 0x600 <__addsf3+0x24>
 5fa:	26 f4       	brtc	.+8      	; 0x604 <__addsf3+0x28>
 5fc:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_nan>
 600:	0e f4       	brtc	.+2      	; 0x604 <__addsf3+0x28>
 602:	e0 95       	com	r30
 604:	e7 fb       	bst	r30, 7
 606:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_inf>

0000060a <__addsf3x>:
 60a:	e9 2f       	mov	r30, r25
 60c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_split3>
 610:	58 f3       	brcs	.-42     	; 0x5e8 <__addsf3+0xc>
 612:	ba 17       	cp	r27, r26
 614:	62 07       	cpc	r22, r18
 616:	73 07       	cpc	r23, r19
 618:	84 07       	cpc	r24, r20
 61a:	95 07       	cpc	r25, r21
 61c:	20 f0       	brcs	.+8      	; 0x626 <__addsf3x+0x1c>
 61e:	79 f4       	brne	.+30     	; 0x63e <__addsf3x+0x34>
 620:	a6 f5       	brtc	.+104    	; 0x68a <__addsf3x+0x80>
 622:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_zero>
 626:	0e f4       	brtc	.+2      	; 0x62a <__addsf3x+0x20>
 628:	e0 95       	com	r30
 62a:	0b 2e       	mov	r0, r27
 62c:	ba 2f       	mov	r27, r26
 62e:	a0 2d       	mov	r26, r0
 630:	0b 01       	movw	r0, r22
 632:	b9 01       	movw	r22, r18
 634:	90 01       	movw	r18, r0
 636:	0c 01       	movw	r0, r24
 638:	ca 01       	movw	r24, r20
 63a:	a0 01       	movw	r20, r0
 63c:	11 24       	eor	r1, r1
 63e:	ff 27       	eor	r31, r31
 640:	59 1b       	sub	r21, r25
 642:	99 f0       	breq	.+38     	; 0x66a <__addsf3x+0x60>
 644:	59 3f       	cpi	r21, 0xF9	; 249
 646:	50 f4       	brcc	.+20     	; 0x65c <__addsf3x+0x52>
 648:	50 3e       	cpi	r21, 0xE0	; 224
 64a:	68 f1       	brcs	.+90     	; 0x6a6 <__addsf3x+0x9c>
 64c:	1a 16       	cp	r1, r26
 64e:	f0 40       	sbci	r31, 0x00	; 0
 650:	a2 2f       	mov	r26, r18
 652:	23 2f       	mov	r18, r19
 654:	34 2f       	mov	r19, r20
 656:	44 27       	eor	r20, r20
 658:	58 5f       	subi	r21, 0xF8	; 248
 65a:	f3 cf       	rjmp	.-26     	; 0x642 <__addsf3x+0x38>
 65c:	46 95       	lsr	r20
 65e:	37 95       	ror	r19
 660:	27 95       	ror	r18
 662:	a7 95       	ror	r26
 664:	f0 40       	sbci	r31, 0x00	; 0
 666:	53 95       	inc	r21
 668:	c9 f7       	brne	.-14     	; 0x65c <__addsf3x+0x52>
 66a:	7e f4       	brtc	.+30     	; 0x68a <__addsf3x+0x80>
 66c:	1f 16       	cp	r1, r31
 66e:	ba 0b       	sbc	r27, r26
 670:	62 0b       	sbc	r22, r18
 672:	73 0b       	sbc	r23, r19
 674:	84 0b       	sbc	r24, r20
 676:	ba f0       	brmi	.+46     	; 0x6a6 <__addsf3x+0x9c>
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	a1 f0       	breq	.+40     	; 0x6a4 <__addsf3x+0x9a>
 67c:	ff 0f       	add	r31, r31
 67e:	bb 1f       	adc	r27, r27
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	c2 f7       	brpl	.-16     	; 0x678 <__addsf3x+0x6e>
 688:	0e c0       	rjmp	.+28     	; 0x6a6 <__addsf3x+0x9c>
 68a:	ba 0f       	add	r27, r26
 68c:	62 1f       	adc	r22, r18
 68e:	73 1f       	adc	r23, r19
 690:	84 1f       	adc	r24, r20
 692:	48 f4       	brcc	.+18     	; 0x6a6 <__addsf3x+0x9c>
 694:	87 95       	ror	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__addsf3x+0x9a>
 6a2:	b0 cf       	rjmp	.-160    	; 0x604 <__addsf3+0x28>
 6a4:	93 95       	inc	r25
 6a6:	88 0f       	add	r24, r24
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <__addsf3x+0xa2>
 6aa:	99 27       	eor	r25, r25
 6ac:	ee 0f       	add	r30, r30
 6ae:	97 95       	ror	r25
 6b0:	87 95       	ror	r24
 6b2:	08 95       	ret

000006b4 <__divsf3>:
 6b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__divsf3x>
 6b8:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_round>
 6bc:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscB>
 6c0:	58 f0       	brcs	.+22     	; 0x6d8 <__divsf3+0x24>
 6c2:	0e 94 41 04 	call	0x882	; 0x882 <__fp_pscA>
 6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__divsf3+0x24>
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <__divsf3+0x20>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	29 f0       	breq	.+10     	; 0x6d8 <__divsf3+0x24>
 6ce:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_inf>
 6d2:	51 11       	cpse	r21, r1
 6d4:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_szero>
 6d8:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_nan>

000006dc <__divsf3x>:
 6dc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_split3>
 6e0:	68 f3       	brcs	.-38     	; 0x6bc <__divsf3+0x8>

000006e2 <__divsf3_pse>:
 6e2:	99 23       	and	r25, r25
 6e4:	b1 f3       	breq	.-20     	; 0x6d2 <__divsf3+0x1e>
 6e6:	55 23       	and	r21, r21
 6e8:	91 f3       	breq	.-28     	; 0x6ce <__divsf3+0x1a>
 6ea:	95 1b       	sub	r25, r21
 6ec:	55 0b       	sbc	r21, r21
 6ee:	bb 27       	eor	r27, r27
 6f0:	aa 27       	eor	r26, r26
 6f2:	62 17       	cp	r22, r18
 6f4:	73 07       	cpc	r23, r19
 6f6:	84 07       	cpc	r24, r20
 6f8:	38 f0       	brcs	.+14     	; 0x708 <__divsf3_pse+0x26>
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	5f 4f       	sbci	r21, 0xFF	; 255
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	44 1f       	adc	r20, r20
 704:	aa 1f       	adc	r26, r26
 706:	a9 f3       	breq	.-22     	; 0x6f2 <__divsf3_pse+0x10>
 708:	35 d0       	rcall	.+106    	; 0x774 <__divsf3_pse+0x92>
 70a:	0e 2e       	mov	r0, r30
 70c:	3a f0       	brmi	.+14     	; 0x71c <__divsf3_pse+0x3a>
 70e:	e0 e8       	ldi	r30, 0x80	; 128
 710:	32 d0       	rcall	.+100    	; 0x776 <__divsf3_pse+0x94>
 712:	91 50       	subi	r25, 0x01	; 1
 714:	50 40       	sbci	r21, 0x00	; 0
 716:	e6 95       	lsr	r30
 718:	00 1c       	adc	r0, r0
 71a:	ca f7       	brpl	.-14     	; 0x70e <__divsf3_pse+0x2c>
 71c:	2b d0       	rcall	.+86     	; 0x774 <__divsf3_pse+0x92>
 71e:	fe 2f       	mov	r31, r30
 720:	29 d0       	rcall	.+82     	; 0x774 <__divsf3_pse+0x92>
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	bb 1f       	adc	r27, r27
 72a:	26 17       	cp	r18, r22
 72c:	37 07       	cpc	r19, r23
 72e:	48 07       	cpc	r20, r24
 730:	ab 07       	cpc	r26, r27
 732:	b0 e8       	ldi	r27, 0x80	; 128
 734:	09 f0       	breq	.+2      	; 0x738 <__divsf3_pse+0x56>
 736:	bb 0b       	sbc	r27, r27
 738:	80 2d       	mov	r24, r0
 73a:	bf 01       	movw	r22, r30
 73c:	ff 27       	eor	r31, r31
 73e:	93 58       	subi	r25, 0x83	; 131
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x70>
 744:	9e 3f       	cpi	r25, 0xFE	; 254
 746:	51 05       	cpc	r21, r1
 748:	78 f0       	brcs	.+30     	; 0x768 <__divsf3_pse+0x86>
 74a:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_inf>
 74e:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_szero>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	e4 f3       	brlt	.-8      	; 0x74e <__divsf3_pse+0x6c>
 756:	98 3e       	cpi	r25, 0xE8	; 232
 758:	d4 f3       	brlt	.-12     	; 0x74e <__divsf3_pse+0x6c>
 75a:	86 95       	lsr	r24
 75c:	77 95       	ror	r23
 75e:	67 95       	ror	r22
 760:	b7 95       	ror	r27
 762:	f7 95       	ror	r31
 764:	9f 5f       	subi	r25, 0xFF	; 255
 766:	c9 f7       	brne	.-14     	; 0x75a <__divsf3_pse+0x78>
 768:	88 0f       	add	r24, r24
 76a:	91 1d       	adc	r25, r1
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret
 774:	e1 e0       	ldi	r30, 0x01	; 1
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	bb 1f       	adc	r27, r27
 77e:	62 17       	cp	r22, r18
 780:	73 07       	cpc	r23, r19
 782:	84 07       	cpc	r24, r20
 784:	ba 07       	cpc	r27, r26
 786:	20 f0       	brcs	.+8      	; 0x790 <__divsf3_pse+0xae>
 788:	62 1b       	sub	r22, r18
 78a:	73 0b       	sbc	r23, r19
 78c:	84 0b       	sbc	r24, r20
 78e:	ba 0b       	sbc	r27, r26
 790:	ee 1f       	adc	r30, r30
 792:	88 f7       	brcc	.-30     	; 0x776 <__divsf3_pse+0x94>
 794:	e0 95       	com	r30
 796:	08 95       	ret

00000798 <__fixunssfsi>:
 798:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_splitA>
 79c:	88 f0       	brcs	.+34     	; 0x7c0 <__fixunssfsi+0x28>
 79e:	9f 57       	subi	r25, 0x7F	; 127
 7a0:	98 f0       	brcs	.+38     	; 0x7c8 <__fixunssfsi+0x30>
 7a2:	b9 2f       	mov	r27, r25
 7a4:	99 27       	eor	r25, r25
 7a6:	b7 51       	subi	r27, 0x17	; 23
 7a8:	b0 f0       	brcs	.+44     	; 0x7d6 <__fixunssfsi+0x3e>
 7aa:	e1 f0       	breq	.+56     	; 0x7e4 <__fixunssfsi+0x4c>
 7ac:	66 0f       	add	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	1a f0       	brmi	.+6      	; 0x7bc <__fixunssfsi+0x24>
 7b6:	ba 95       	dec	r27
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <__fixunssfsi+0x14>
 7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <__fixunssfsi+0x4c>
 7bc:	b1 30       	cpi	r27, 0x01	; 1
 7be:	91 f0       	breq	.+36     	; 0x7e4 <__fixunssfsi+0x4c>
 7c0:	0e 94 82 04 	call	0x904	; 0x904 <__fp_zero>
 7c4:	b1 e0       	ldi	r27, 0x01	; 1
 7c6:	08 95       	ret
 7c8:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_zero>
 7cc:	67 2f       	mov	r22, r23
 7ce:	78 2f       	mov	r23, r24
 7d0:	88 27       	eor	r24, r24
 7d2:	b8 5f       	subi	r27, 0xF8	; 248
 7d4:	39 f0       	breq	.+14     	; 0x7e4 <__fixunssfsi+0x4c>
 7d6:	b9 3f       	cpi	r27, 0xF9	; 249
 7d8:	cc f3       	brlt	.-14     	; 0x7cc <__fixunssfsi+0x34>
 7da:	86 95       	lsr	r24
 7dc:	77 95       	ror	r23
 7de:	67 95       	ror	r22
 7e0:	b3 95       	inc	r27
 7e2:	d9 f7       	brne	.-10     	; 0x7da <__fixunssfsi+0x42>
 7e4:	3e f4       	brtc	.+14     	; 0x7f4 <__fixunssfsi+0x5c>
 7e6:	90 95       	com	r25
 7e8:	80 95       	com	r24
 7ea:	70 95       	com	r23
 7ec:	61 95       	neg	r22
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__floatunsisf>:
 7f6:	e8 94       	clt
 7f8:	09 c0       	rjmp	.+18     	; 0x80c <__floatsisf+0x12>

000007fa <__floatsisf>:
 7fa:	97 fb       	bst	r25, 7
 7fc:	3e f4       	brtc	.+14     	; 0x80c <__floatsisf+0x12>
 7fe:	90 95       	com	r25
 800:	80 95       	com	r24
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	99 23       	and	r25, r25
 80e:	a9 f0       	breq	.+42     	; 0x83a <__floatsisf+0x40>
 810:	f9 2f       	mov	r31, r25
 812:	96 e9       	ldi	r25, 0x96	; 150
 814:	bb 27       	eor	r27, r27
 816:	93 95       	inc	r25
 818:	f6 95       	lsr	r31
 81a:	87 95       	ror	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	b7 95       	ror	r27
 822:	f1 11       	cpse	r31, r1
 824:	f8 cf       	rjmp	.-16     	; 0x816 <__floatsisf+0x1c>
 826:	fa f4       	brpl	.+62     	; 0x866 <__floatsisf+0x6c>
 828:	bb 0f       	add	r27, r27
 82a:	11 f4       	brne	.+4      	; 0x830 <__floatsisf+0x36>
 82c:	60 ff       	sbrs	r22, 0
 82e:	1b c0       	rjmp	.+54     	; 0x866 <__floatsisf+0x6c>
 830:	6f 5f       	subi	r22, 0xFF	; 255
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	8f 4f       	sbci	r24, 0xFF	; 255
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	16 c0       	rjmp	.+44     	; 0x866 <__floatsisf+0x6c>
 83a:	88 23       	and	r24, r24
 83c:	11 f0       	breq	.+4      	; 0x842 <__floatsisf+0x48>
 83e:	96 e9       	ldi	r25, 0x96	; 150
 840:	11 c0       	rjmp	.+34     	; 0x864 <__floatsisf+0x6a>
 842:	77 23       	and	r23, r23
 844:	21 f0       	breq	.+8      	; 0x84e <__floatsisf+0x54>
 846:	9e e8       	ldi	r25, 0x8E	; 142
 848:	87 2f       	mov	r24, r23
 84a:	76 2f       	mov	r23, r22
 84c:	05 c0       	rjmp	.+10     	; 0x858 <__floatsisf+0x5e>
 84e:	66 23       	and	r22, r22
 850:	71 f0       	breq	.+28     	; 0x86e <__floatsisf+0x74>
 852:	96 e8       	ldi	r25, 0x86	; 134
 854:	86 2f       	mov	r24, r22
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	2a f0       	brmi	.+10     	; 0x866 <__floatsisf+0x6c>
 85c:	9a 95       	dec	r25
 85e:	66 0f       	add	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	da f7       	brpl	.-10     	; 0x85c <__floatsisf+0x62>
 866:	88 0f       	add	r24, r24
 868:	96 95       	lsr	r25
 86a:	87 95       	ror	r24
 86c:	97 f9       	bld	r25, 7
 86e:	08 95       	ret

00000870 <__fp_inf>:
 870:	97 f9       	bld	r25, 7
 872:	9f 67       	ori	r25, 0x7F	; 127
 874:	80 e8       	ldi	r24, 0x80	; 128
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	08 95       	ret

0000087c <__fp_nan>:
 87c:	9f ef       	ldi	r25, 0xFF	; 255
 87e:	80 ec       	ldi	r24, 0xC0	; 192
 880:	08 95       	ret

00000882 <__fp_pscA>:
 882:	00 24       	eor	r0, r0
 884:	0a 94       	dec	r0
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	18 06       	cpc	r1, r24
 88c:	09 06       	cpc	r0, r25
 88e:	08 95       	ret

00000890 <__fp_pscB>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	14 06       	cpc	r1, r20
 89a:	05 06       	cpc	r0, r21
 89c:	08 95       	ret

0000089e <__fp_round>:
 89e:	09 2e       	mov	r0, r25
 8a0:	03 94       	inc	r0
 8a2:	00 0c       	add	r0, r0
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0xc>
 8a6:	88 23       	and	r24, r24
 8a8:	52 f0       	brmi	.+20     	; 0x8be <__fp_round+0x20>
 8aa:	bb 0f       	add	r27, r27
 8ac:	40 f4       	brcc	.+16     	; 0x8be <__fp_round+0x20>
 8ae:	bf 2b       	or	r27, r31
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <__fp_round+0x18>
 8b2:	60 ff       	sbrs	r22, 0
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <__fp_round+0x20>
 8b6:	6f 5f       	subi	r22, 0xFF	; 255
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__fp_split3>:
 8c0:	57 fd       	sbrc	r21, 7
 8c2:	90 58       	subi	r25, 0x80	; 128
 8c4:	44 0f       	add	r20, r20
 8c6:	55 1f       	adc	r21, r21
 8c8:	59 f0       	breq	.+22     	; 0x8e0 <__fp_splitA+0x10>
 8ca:	5f 3f       	cpi	r21, 0xFF	; 255
 8cc:	71 f0       	breq	.+28     	; 0x8ea <__fp_splitA+0x1a>
 8ce:	47 95       	ror	r20

000008d0 <__fp_splitA>:
 8d0:	88 0f       	add	r24, r24
 8d2:	97 fb       	bst	r25, 7
 8d4:	99 1f       	adc	r25, r25
 8d6:	61 f0       	breq	.+24     	; 0x8f0 <__fp_splitA+0x20>
 8d8:	9f 3f       	cpi	r25, 0xFF	; 255
 8da:	79 f0       	breq	.+30     	; 0x8fa <__fp_splitA+0x2a>
 8dc:	87 95       	ror	r24
 8de:	08 95       	ret
 8e0:	12 16       	cp	r1, r18
 8e2:	13 06       	cpc	r1, r19
 8e4:	14 06       	cpc	r1, r20
 8e6:	55 1f       	adc	r21, r21
 8e8:	f2 cf       	rjmp	.-28     	; 0x8ce <__fp_split3+0xe>
 8ea:	46 95       	lsr	r20
 8ec:	f1 df       	rcall	.-30     	; 0x8d0 <__fp_splitA>
 8ee:	08 c0       	rjmp	.+16     	; 0x900 <__stack+0x1>
 8f0:	16 16       	cp	r1, r22
 8f2:	17 06       	cpc	r1, r23
 8f4:	18 06       	cpc	r1, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	f1 cf       	rjmp	.-30     	; 0x8dc <__fp_splitA+0xc>
 8fa:	86 95       	lsr	r24
 8fc:	71 05       	cpc	r23, r1
 8fe:	61 05       	cpc	r22, r1
 900:	08 94       	sec
 902:	08 95       	ret

00000904 <__fp_zero>:
 904:	e8 94       	clt

00000906 <__fp_szero>:
 906:	bb 27       	eor	r27, r27
 908:	66 27       	eor	r22, r22
 90a:	77 27       	eor	r23, r23
 90c:	cb 01       	movw	r24, r22
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret

00000912 <__mulsf3>:
 912:	0e 94 9c 04 	call	0x938	; 0x938 <__mulsf3x>
 916:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_round>
 91a:	0e 94 41 04 	call	0x882	; 0x882 <__fp_pscA>
 91e:	38 f0       	brcs	.+14     	; 0x92e <__mulsf3+0x1c>
 920:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscB>
 924:	20 f0       	brcs	.+8      	; 0x92e <__mulsf3+0x1c>
 926:	95 23       	and	r25, r21
 928:	11 f0       	breq	.+4      	; 0x92e <__mulsf3+0x1c>
 92a:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_inf>
 92e:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_nan>
 932:	11 24       	eor	r1, r1
 934:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_szero>

00000938 <__mulsf3x>:
 938:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_split3>
 93c:	70 f3       	brcs	.-36     	; 0x91a <__mulsf3+0x8>

0000093e <__mulsf3_pse>:
 93e:	95 9f       	mul	r25, r21
 940:	c1 f3       	breq	.-16     	; 0x932 <__mulsf3+0x20>
 942:	95 0f       	add	r25, r21
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	55 1f       	adc	r21, r21
 948:	62 9f       	mul	r22, r18
 94a:	f0 01       	movw	r30, r0
 94c:	72 9f       	mul	r23, r18
 94e:	bb 27       	eor	r27, r27
 950:	f0 0d       	add	r31, r0
 952:	b1 1d       	adc	r27, r1
 954:	63 9f       	mul	r22, r19
 956:	aa 27       	eor	r26, r26
 958:	f0 0d       	add	r31, r0
 95a:	b1 1d       	adc	r27, r1
 95c:	aa 1f       	adc	r26, r26
 95e:	64 9f       	mul	r22, r20
 960:	66 27       	eor	r22, r22
 962:	b0 0d       	add	r27, r0
 964:	a1 1d       	adc	r26, r1
 966:	66 1f       	adc	r22, r22
 968:	82 9f       	mul	r24, r18
 96a:	22 27       	eor	r18, r18
 96c:	b0 0d       	add	r27, r0
 96e:	a1 1d       	adc	r26, r1
 970:	62 1f       	adc	r22, r18
 972:	73 9f       	mul	r23, r19
 974:	b0 0d       	add	r27, r0
 976:	a1 1d       	adc	r26, r1
 978:	62 1f       	adc	r22, r18
 97a:	83 9f       	mul	r24, r19
 97c:	a0 0d       	add	r26, r0
 97e:	61 1d       	adc	r22, r1
 980:	22 1f       	adc	r18, r18
 982:	74 9f       	mul	r23, r20
 984:	33 27       	eor	r19, r19
 986:	a0 0d       	add	r26, r0
 988:	61 1d       	adc	r22, r1
 98a:	23 1f       	adc	r18, r19
 98c:	84 9f       	mul	r24, r20
 98e:	60 0d       	add	r22, r0
 990:	21 1d       	adc	r18, r1
 992:	82 2f       	mov	r24, r18
 994:	76 2f       	mov	r23, r22
 996:	6a 2f       	mov	r22, r26
 998:	11 24       	eor	r1, r1
 99a:	9f 57       	subi	r25, 0x7F	; 127
 99c:	50 40       	sbci	r21, 0x00	; 0
 99e:	9a f0       	brmi	.+38     	; 0x9c6 <__mulsf3_pse+0x88>
 9a0:	f1 f0       	breq	.+60     	; 0x9de <__mulsf3_pse+0xa0>
 9a2:	88 23       	and	r24, r24
 9a4:	4a f0       	brmi	.+18     	; 0x9b8 <__mulsf3_pse+0x7a>
 9a6:	ee 0f       	add	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	bb 1f       	adc	r27, r27
 9ac:	66 1f       	adc	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	91 50       	subi	r25, 0x01	; 1
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	a9 f7       	brne	.-22     	; 0x9a2 <__mulsf3_pse+0x64>
 9b8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ba:	51 05       	cpc	r21, r1
 9bc:	80 f0       	brcs	.+32     	; 0x9de <__mulsf3_pse+0xa0>
 9be:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_inf>
 9c2:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_szero>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	e4 f3       	brlt	.-8      	; 0x9c2 <__mulsf3_pse+0x84>
 9ca:	98 3e       	cpi	r25, 0xE8	; 232
 9cc:	d4 f3       	brlt	.-12     	; 0x9c2 <__mulsf3_pse+0x84>
 9ce:	86 95       	lsr	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f7 95       	ror	r31
 9d8:	e7 95       	ror	r30
 9da:	9f 5f       	subi	r25, 0xFF	; 255
 9dc:	c1 f7       	brne	.-16     	; 0x9ce <__mulsf3_pse+0x90>
 9de:	fe 2b       	or	r31, r30
 9e0:	88 0f       	add	r24, r24
 9e2:	91 1d       	adc	r25, r1
 9e4:	96 95       	lsr	r25
 9e6:	87 95       	ror	r24
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__umulhisi3>:
 9ec:	a2 9f       	mul	r26, r18
 9ee:	b0 01       	movw	r22, r0
 9f0:	b3 9f       	mul	r27, r19
 9f2:	c0 01       	movw	r24, r0
 9f4:	a3 9f       	mul	r26, r19
 9f6:	70 0d       	add	r23, r0
 9f8:	81 1d       	adc	r24, r1
 9fa:	11 24       	eor	r1, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	b2 9f       	mul	r27, r18
 a00:	70 0d       	add	r23, r0
 a02:	81 1d       	adc	r24, r1
 a04:	11 24       	eor	r1, r1
 a06:	91 1d       	adc	r25, r1
 a08:	08 95       	ret

00000a0a <_exit>:
 a0a:	f8 94       	cli

00000a0c <__stop_program>:
 a0c:	ff cf       	rjmp	.-2      	; 0xa0c <__stop_program>
