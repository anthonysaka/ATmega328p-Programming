
_7_Segment_Display_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b25  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066d  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000497  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064c  00000000  00000000  00002a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00003097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  68:	cb 01       	movw	r24, r22
  6a:	d2 01       	movw	r26, r4
  6c:	d8 01       	movw	r26, r16
  6e:	df 01       	movw	r26, r30
  70:	e4 01       	movw	r28, r8
  72:	eb 01       	movw	r28, r22
  74:	f2 01       	movw	r30, r4
  76:	f9 01       	movw	r30, r18
  78:	ff 01       	movw	r30, r30
  7a:	06 02       	muls	r16, r22
  7c:	0d 02       	muls	r16, r29

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d8 e0       	ldi	r29, 0x08	; 8
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  9e:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <system_setup>:
	// ----------------------------------
	//    4 DIGIT - 7 SEGMENTS DISPLAY
	// ----------------------------------
	
	// Salidas - Segmentos [DCBA]
	DDRD |= (1 << PORTD7) | (1 << PORTD6) | (1 << PORTD5) | (1 << PORTD4);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10
	
	// Salidas - Segmentos [HGFE]
	DDRC |= (1 << PORTC3) | (1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	87 b9       	out	0x07, r24	; 7
	
	// Salidas - Transistores (Selectores de digito)
	DDRB |= (1 << PORTB4) | (1 << PORTB3) | (1 << PORTB2) | (1 << PORTB1);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	8e 61       	ori	r24, 0x1E	; 30
  b6:	84 b9       	out	0x04, r24	; 4
	// ----------------------------------
	//        ULTRASONIC SENSOR
	// ----------------------------------
	
	// Salida - Trigger
	DDRD |= (1 << PORTD3);
  b8:	53 9a       	sbi	0x0a, 3	; 10
	
	// Entrada - Echo
	DDRB |= (0 << PORTB0);
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	84 b9       	out	0x04, r24	; 4
	
	// ----------------------------------
	//        TIMER / COUNTER
	// ----------------------------------
	
	TCCR1A |= (0 << WGM10) | (0 << WGM11);
  be:	e0 e8       	ldi	r30, 0x80	; 128
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 83       	st	Z, r24
	TCCR1B |= (0 << WGM12) | (0 << WGM13);
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | (0 << CS10);
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
	TCCR1B |= (1 << ICES1);
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	TCNT1 = 0; // Inicializar el contador
  da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// ----------------------------------
	//        PUSH BUTTON
	// ----------------------------------
	
	// Entrada - PB #0 (PA.0)
	DDRD |= (0 << PORTD2);
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (0 << PORTD2);
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret

000000ec <delay_loop_counter>:


bool delay_loop_counter ( uint16_t *count , uint16_t top_count )
{
	// Check top count achieved
	if ( *count == top_count )
  ec:	fc 01       	movw	r30, r24
  ee:	20 81       	ld	r18, Z
  f0:	31 81       	ldd	r19, Z+1	; 0x01
  f2:	26 17       	cp	r18, r22
  f4:	37 07       	cpc	r19, r23
  f6:	21 f4       	brne	.+8      	; 0x100 <delay_loop_counter+0x14>
	{
		// Reset counter and return loop counter top reached
		*count = 0;
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
		
		return true;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret
	}
	else
	{
		// Increment counter and signal top count not reached
		*count = *count + 1;
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	31 83       	std	Z+1, r19	; 0x01
 108:	20 83       	st	Z, r18
		return false;
 10a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 10c:	08 95       	ret

0000010e <data_update>:
}



void data_update ( float data[DATAMAX] , float number )
{
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	fc 01       	movw	r30, r24
 114:	dc 01       	movw	r26, r24
 116:	94 96       	adiw	r26, 0x24	; 36
	uint8_t ind;
	
	for ( ind = 0 ; ind < DATAMAX - 1 ; ind ++ )
	data[ind] = data[ind+1];
 118:	04 81       	ldd	r16, Z+4	; 0x04
 11a:	15 81       	ldd	r17, Z+5	; 0x05
 11c:	26 81       	ldd	r18, Z+6	; 0x06
 11e:	37 81       	ldd	r19, Z+7	; 0x07
 120:	01 93       	st	Z+, r16
 122:	11 93       	st	Z+, r17
 124:	21 93       	st	Z+, r18
 126:	31 93       	st	Z+, r19

void data_update ( float data[DATAMAX] , float number )
{
	uint8_t ind;
	
	for ( ind = 0 ; ind < DATAMAX - 1 ; ind ++ )
 128:	ea 17       	cp	r30, r26
 12a:	fb 07       	cpc	r31, r27
 12c:	a9 f7       	brne	.-22     	; 0x118 <data_update+0xa>
	data[ind] = data[ind+1];
	
	data[ind-1] = number;
 12e:	fc 01       	movw	r30, r24
 130:	40 a3       	std	Z+32, r20	; 0x20
 132:	51 a3       	std	Z+33, r21	; 0x21
 134:	62 a3       	std	Z+34, r22	; 0x22
 136:	73 a3       	std	Z+35, r23	; 0x23

	return;
}
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <data_average>:


float data_average ( float data[DATAMAX] , char modes )
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	float number = 0.0;
	uint8_t ind;
	
	if ( modes == '0' )
 146:	60 33       	cpi	r22, 0x30	; 48
 148:	b9 f4       	brne	.+46     	; 0x178 <data_average+0x3a>
 14a:	ec 01       	movw	r28, r24
 14c:	8c 01       	movw	r16, r24
 14e:	08 5d       	subi	r16, 0xD8	; 216
 150:	1f 4f       	sbci	r17, 0xFF	; 255
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	cb 01       	movw	r24, r22
	{
		for ( ind = 0 ; ind < DATAMAX ; ind ++ )
			number += data[ind];
 158:	29 91       	ld	r18, Y+
 15a:	39 91       	ld	r19, Y+
 15c:	49 91       	ld	r20, Y+
 15e:	59 91       	ld	r21, Y+
 160:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__addsf3>
	float number = 0.0;
	uint8_t ind;
	
	if ( modes == '0' )
	{
		for ( ind = 0 ; ind < DATAMAX ; ind ++ )
 164:	c0 17       	cp	r28, r16
 166:	d1 07       	cpc	r29, r17
 168:	b9 f7       	brne	.-18     	; 0x158 <data_average+0x1a>
			number += data[ind];
	
		return (number / DATAMAX);
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e2       	ldi	r20, 0x20	; 32
 170:	51 e4       	ldi	r21, 0x41	; 65
 172:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 176:	22 c0       	rjmp	.+68     	; 0x1bc <data_average+0x7e>
	}
	else
	{
		if ( modes == '1' )
 178:	61 33       	cpi	r22, 0x31	; 49
 17a:	e9 f4       	brne	.+58     	; 0x1b6 <data_average+0x78>
 17c:	ec 01       	movw	r28, r24
 17e:	8c 01       	movw	r16, r24
 180:	08 5d       	subi	r16, 0xD8	; 216
 182:	1f 4f       	sbci	r17, 0xFF	; 255
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	cb 01       	movw	r24, r22
		{	
			for ( ind = 0 ; ind < DATAMAX ; ind ++ )
				number += data[ind];
 18a:	29 91       	ld	r18, Y+
 18c:	39 91       	ld	r19, Y+
 18e:	49 91       	ld	r20, Y+
 190:	59 91       	ld	r21, Y+
 192:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__addsf3>
	}
	else
	{
		if ( modes == '1' )
		{	
			for ( ind = 0 ; ind < DATAMAX ; ind ++ )
 196:	c0 17       	cp	r28, r16
 198:	d1 07       	cpc	r29, r17
 19a:	b9 f7       	brne	.-18     	; 0x18a <data_average+0x4c>
				number += data[ind];
			
			return ((number / DATAMAX) / INCH);
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e2       	ldi	r20, 0x20	; 32
 1a2:	51 e4       	ldi	r21, 0x41	; 65
 1a4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 1a8:	2c e5       	ldi	r18, 0x5C	; 92
 1aa:	3f e8       	ldi	r19, 0x8F	; 143
 1ac:	42 e2       	ldi	r20, 0x22	; 34
 1ae:	50 e4       	ldi	r21, 0x40	; 64
 1b0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <data_average+0x7e>
		}
	}
	
	return 0;
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	cb 01       	movw	r24, r22
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <data_divisor>:


void data_divisor ( float auxiliar , uint8_t digit[LCDS] )
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ea 01       	movw	r28, r20
	int number = 0;
	
	number = auxiliar * 10;
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e2       	ldi	r20, 0x20	; 32
 1d2:	51 e4       	ldi	r21, 0x41	; 65
 1d4:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 1d8:	0e 94 cc 03 	call	0x798	; 0x798 <__fixsfsi>
	
	digit[3] = number / 1000;
 1dc:	cb 01       	movw	r24, r22
 1de:	68 ee       	ldi	r22, 0xE8	; 232
 1e0:	73 e0       	ldi	r23, 0x03	; 3
 1e2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__divmodhi4>
 1e6:	6b 83       	std	Y+3, r22	; 0x03
	digit[2] = (number % 1000) / 100;
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 26 05 	call	0xa4c	; 0xa4c <__divmodhi4>
 1f0:	6a 83       	std	Y+2, r22	; 0x02
	digit[1] = ((number % 1000) % 100) / 10;
 1f2:	6a e0       	ldi	r22, 0x0A	; 10
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	0e 94 26 05 	call	0xa4c	; 0xa4c <__divmodhi4>
 1fa:	69 83       	std	Y+1, r22	; 0x01
	digit[0] = ((number % 1000) % 100) % 10 / 1;
 1fc:	88 83       	st	Y, r24

	return;
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <display_dynamic>:


void display_dynamic ( uint8_t position , float number , uint8_t digit[DATAMAX] , char modes )
{
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
	uint8_t ind;
	
	if ( position == 0 )
 212:	81 11       	cpse	r24, r1
 214:	03 c0       	rjmp	.+6      	; 0x21c <display_dynamic+0x18>
		PORTB |= (1 << PORTB1);
 216:	29 9a       	sbi	0x05, 1	; 5
		PORTB &= ~(1 << PORTB1);
	
	if ( position == 1 )
		PORTB |= (1 << PORTB2);
	else
		PORTB &= ~(1 << PORTB2);
 218:	2a 98       	cbi	0x05, 2	; 5
 21a:	0b c0       	rjmp	.+22     	; 0x232 <display_dynamic+0x2e>
	uint8_t ind;
	
	if ( position == 0 )
		PORTB |= (1 << PORTB1);
	else
		PORTB &= ~(1 << PORTB1);
 21c:	29 98       	cbi	0x05, 1	; 5
	
	if ( position == 1 )
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	19 f4       	brne	.+6      	; 0x228 <display_dynamic+0x24>
		PORTB |= (1 << PORTB2);
 222:	2a 9a       	sbi	0x05, 2	; 5
		PORTB &= ~(1 << PORTB2);

	if ( position == 2 )
		PORTB |= (1 << PORTB3);
	else
		PORTB &= ~(1 << PORTB3);
 224:	2b 98       	cbi	0x05, 3	; 5
 226:	0a c0       	rjmp	.+20     	; 0x23c <display_dynamic+0x38>
		PORTB &= ~(1 << PORTB1);
	
	if ( position == 1 )
		PORTB |= (1 << PORTB2);
	else
		PORTB &= ~(1 << PORTB2);
 228:	2a 98       	cbi	0x05, 2	; 5

	if ( position == 2 )
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	11 f4       	brne	.+4      	; 0x232 <display_dynamic+0x2e>
		PORTB |= (1 << PORTB3);
 22e:	2b 9a       	sbi	0x05, 3	; 5
 230:	05 c0       	rjmp	.+10     	; 0x23c <display_dynamic+0x38>
	else
		PORTB &= ~(1 << PORTB3);
 232:	2b 98       	cbi	0x05, 3	; 5

	if ( position == 3 )
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	11 f4       	brne	.+4      	; 0x23c <display_dynamic+0x38>
		PORTB |= (1 << PORTB4);
 238:	2c 9a       	sbi	0x05, 4	; 5
 23a:	01 c0       	rjmp	.+2      	; 0x23e <display_dynamic+0x3a>
	else
		PORTB &= ~(1 << PORTB4);
 23c:	2c 98       	cbi	0x05, 4	; 5

	// Aqui se apagan los digitos innecesarios (ceros a la izquierda)
	if ( modes == '0' || modes == '1' )
 23e:	80 ed       	ldi	r24, 0xD0	; 208
 240:	80 0f       	add	r24, r16
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	08 f0       	brcs	.+2      	; 0x248 <display_dynamic+0x44>
 246:	6a c0       	rjmp	.+212    	; 0x31c <display_dynamic+0x118>
 248:	e9 01       	movw	r28, r18
 24a:	6a 01       	movw	r12, r20
 24c:	7b 01       	movw	r14, r22
	{
		if ( number >= 0.000 && number <= 9.999 )
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	a9 01       	movw	r20, r18
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	0e 94 b4 04 	call	0x968	; 0x968 <__gesf2>
 25c:	88 23       	and	r24, r24
 25e:	64 f0       	brlt	.+24     	; 0x278 <display_dynamic+0x74>
 260:	27 ee       	ldi	r18, 0xE7	; 231
 262:	3b ef       	ldi	r19, 0xFB	; 251
 264:	4f e1       	ldi	r20, 0x1F	; 31
 266:	51 e4       	ldi	r21, 0x41	; 65
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	0e 94 55 03 	call	0x6aa	; 0x6aa <__cmpsf2>
 270:	18 16       	cp	r1, r24
 272:	14 f0       	brlt	.+4      	; 0x278 <display_dynamic+0x74>
		{
			PORTB &= ~(1 << PORTB4);
 274:	2c 98       	cbi	0x05, 4	; 5
			PORTB &= ~(1 << PORTB3);
 276:	2b 98       	cbi	0x05, 3	; 5
		}
		
		if ( number >= 10.000 && number <= 99.999 )
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	40 e2       	ldi	r20, 0x20	; 32
 27e:	51 e4       	ldi	r21, 0x41	; 65
 280:	c7 01       	movw	r24, r14
 282:	b6 01       	movw	r22, r12
 284:	0e 94 b4 04 	call	0x968	; 0x968 <__gesf2>
 288:	88 23       	and	r24, r24
 28a:	5c f0       	brlt	.+22     	; 0x2a2 <display_dynamic+0x9e>
 28c:	2d e7       	ldi	r18, 0x7D	; 125
 28e:	3f ef       	ldi	r19, 0xFF	; 255
 290:	47 ec       	ldi	r20, 0xC7	; 199
 292:	52 e4       	ldi	r21, 0x42	; 66
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	0e 94 55 03 	call	0x6aa	; 0x6aa <__cmpsf2>
 29c:	18 16       	cp	r1, r24
 29e:	0c f0       	brlt	.+2      	; 0x2a2 <display_dynamic+0x9e>
			PORTB &= ~(1 << PORTB4);
 2a0:	2c 98       	cbi	0x05, 4	; 5


		// Error en pantalla para modo centimetros
		if ( modes == '0' )
 2a2:	00 33       	cpi	r16, 0x30	; 48
 2a4:	e9 f4       	brne	.+58     	; 0x2e0 <display_dynamic+0xdc>
			if ( number < 2.000 || number > 400.000 )
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e4       	ldi	r21, 0x40	; 64
 2ae:	c7 01       	movw	r24, r14
 2b0:	b6 01       	movw	r22, r12
 2b2:	0e 94 55 03 	call	0x6aa	; 0x6aa <__cmpsf2>
 2b6:	88 23       	and	r24, r24
 2b8:	54 f0       	brlt	.+20     	; 0x2ce <display_dynamic+0xca>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	48 ec       	ldi	r20, 0xC8	; 200
 2c0:	53 e4       	ldi	r21, 0x43	; 67
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	0e 94 b4 04 	call	0x968	; 0x968 <__gesf2>
 2ca:	18 16       	cp	r1, r24
 2cc:	3c f5       	brge	.+78     	; 0x31c <display_dynamic+0x118>
			{
				PORTB &= ~(1 << PORTB3);
 2ce:	2b 98       	cbi	0x05, 3	; 5
				PORTB &= ~(1 << PORTB2);
 2d0:	2a 98       	cbi	0x05, 2	; 5
				PORTB &= ~(1 << PORTB1);
 2d2:	29 98       	cbi	0x05, 1	; 5
			
				for ( ind = 0 ; ind < LCDS ; ind ++ )
					digit[ind] = 10;
 2d4:	8a e0       	ldi	r24, 0x0A	; 10
 2d6:	88 83       	st	Y, r24
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	8a 83       	std	Y+2, r24	; 0x02
 2dc:	8b 83       	std	Y+3, r24	; 0x03
 2de:	1e c0       	rjmp	.+60     	; 0x31c <display_dynamic+0x118>
			}
		
		// Error en pantalla para modo pulgadas
		if ( modes == '1' )
 2e0:	01 33       	cpi	r16, 0x31	; 49
 2e2:	e1 f4       	brne	.+56     	; 0x31c <display_dynamic+0x118>
			if ( number < (2.000 / 2.540) || number > (400.000 / 2.540) )
 2e4:	26 e2       	ldi	r18, 0x26	; 38
 2e6:	33 e9       	ldi	r19, 0x93	; 147
 2e8:	49 e4       	ldi	r20, 0x49	; 73
 2ea:	5f e3       	ldi	r21, 0x3F	; 63
 2ec:	c7 01       	movw	r24, r14
 2ee:	b6 01       	movw	r22, r12
 2f0:	0e 94 55 03 	call	0x6aa	; 0x6aa <__cmpsf2>
 2f4:	88 23       	and	r24, r24
 2f6:	54 f0       	brlt	.+20     	; 0x30c <display_dynamic+0x108>
 2f8:	26 ef       	ldi	r18, 0xF6	; 246
 2fa:	3a e7       	ldi	r19, 0x7A	; 122
 2fc:	4d e1       	ldi	r20, 0x1D	; 29
 2fe:	53 e4       	ldi	r21, 0x43	; 67
 300:	c7 01       	movw	r24, r14
 302:	b6 01       	movw	r22, r12
 304:	0e 94 b4 04 	call	0x968	; 0x968 <__gesf2>
 308:	18 16       	cp	r1, r24
 30a:	44 f4       	brge	.+16     	; 0x31c <display_dynamic+0x118>
			{
				PORTB &= ~(1 << PORTB3);
 30c:	2b 98       	cbi	0x05, 3	; 5
				PORTB &= ~(1 << PORTB2);
 30e:	2a 98       	cbi	0x05, 2	; 5
				PORTB &= ~(1 << PORTB1);
 310:	29 98       	cbi	0x05, 1	; 5
			
				for ( ind = 0 ; ind < LCDS ; ind ++ )
					digit[ind] = 10;
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	88 83       	st	Y, r24
 316:	89 83       	std	Y+1, r24	; 0x01
 318:	8a 83       	std	Y+2, r24	; 0x02
 31a:	8b 83       	std	Y+3, r24	; 0x03
			}
	}

	return;
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	08 95       	ret

0000032c <display_clear>:


void display_clear ( void )
{
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t ind;
	
	// Limpia los segmentos DCBA
	for ( ind = 0 ; ind < 4 ; ind ++ )
		PORTC &= ~(1 << ind);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	38 b1       	in	r19, 0x08	; 8
 336:	ab 01       	movw	r20, r22
 338:	08 2e       	mov	r0, r24
 33a:	02 c0       	rjmp	.+4      	; 0x340 <display_clear+0x14>
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <display_clear+0x10>
 344:	24 2f       	mov	r18, r20
 346:	20 95       	com	r18
 348:	23 23       	and	r18, r19
 34a:	28 b9       	out	0x08, r18	; 8
 34c:	01 96       	adiw	r24, 0x01	; 1
void display_clear ( void )
{
	uint8_t ind;
	
	// Limpia los segmentos DCBA
	for ( ind = 0 ; ind < 4 ; ind ++ )
 34e:	84 30       	cpi	r24, 0x04	; 4
 350:	91 05       	cpc	r25, r1
 352:	81 f7       	brne	.-32     	; 0x334 <display_clear+0x8>
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	90 e0       	ldi	r25, 0x00	; 0
		PORTC &= ~(1 << ind);
	
	// Limpia los segmentos HGFE
	for ( ind = 7 ; ind > 3 ; ind -- )
		PORTD &= ~(1 << ind);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	3b b1       	in	r19, 0x0b	; 11
 35e:	ab 01       	movw	r20, r22
 360:	08 2e       	mov	r0, r24
 362:	02 c0       	rjmp	.+4      	; 0x368 <display_clear+0x3c>
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <display_clear+0x38>
 36c:	24 2f       	mov	r18, r20
 36e:	20 95       	com	r18
 370:	23 23       	and	r18, r19
 372:	2b b9       	out	0x0b, r18	; 11
 374:	01 97       	sbiw	r24, 0x01	; 1
	// Limpia los segmentos DCBA
	for ( ind = 0 ; ind < 4 ; ind ++ )
		PORTC &= ~(1 << ind);
	
	// Limpia los segmentos HGFE
	for ( ind = 7 ; ind > 3 ; ind -- )
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	91 05       	cpc	r25, r1
 37a:	81 f7       	brne	.-32     	; 0x35c <display_clear+0x30>
		PORTD &= ~(1 << ind);
	
	return;
}
 37c:	08 95       	ret

0000037e <display_print>:


void display_print ( uint8_t digit , uint8_t position )
{
 37e:	96 2f       	mov	r25, r22
	switch ( digit )
 380:	48 2f       	mov	r20, r24
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	4b 30       	cpi	r20, 0x0B	; 11
 386:	51 05       	cpc	r21, r1
 388:	08 f0       	brcs	.+2      	; 0x38c <display_print+0xe>
 38a:	4e c0       	rjmp	.+156    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 38c:	fa 01       	movw	r30, r20
 38e:	ec 5c       	subi	r30, 0xCC	; 204
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__tablejump2__>
	{
		case 0:
			PORTD |= 0b11110000;
 396:	8b b1       	in	r24, 0x0b	; 11
 398:	80 6f       	ori	r24, 0xF0	; 240
 39a:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000011;
 39c:	88 b1       	in	r24, 0x08	; 8
 39e:	83 60       	ori	r24, 0x03	; 3
 3a0:	88 b9       	out	0x08, r24	; 8
			break;
 3a2:	48 c0       	rjmp	.+144    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 1:
			PORTD |= 0b01100000;
 3a4:	8b b1       	in	r24, 0x0b	; 11
 3a6:	80 66       	ori	r24, 0x60	; 96
 3a8:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000000;
 3aa:	88 b1       	in	r24, 0x08	; 8
 3ac:	88 b9       	out	0x08, r24	; 8
			break;
 3ae:	42 c0       	rjmp	.+132    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 2:
			PORTD |= 0b10110000;
 3b0:	8b b1       	in	r24, 0x0b	; 11
 3b2:	80 6b       	ori	r24, 0xB0	; 176
 3b4:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000101;
 3b6:	88 b1       	in	r24, 0x08	; 8
 3b8:	85 60       	ori	r24, 0x05	; 5
 3ba:	88 b9       	out	0x08, r24	; 8
			break;
 3bc:	3b c0       	rjmp	.+118    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 3:
			PORTD |= 0b11110000;
 3be:	8b b1       	in	r24, 0x0b	; 11
 3c0:	80 6f       	ori	r24, 0xF0	; 240
 3c2:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000100;
 3c4:	42 9a       	sbi	0x08, 2	; 8
			break;
 3c6:	36 c0       	rjmp	.+108    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 4:
			PORTD |= 0b01100000;
 3c8:	8b b1       	in	r24, 0x0b	; 11
 3ca:	80 66       	ori	r24, 0x60	; 96
 3cc:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000110;
 3ce:	88 b1       	in	r24, 0x08	; 8
 3d0:	86 60       	ori	r24, 0x06	; 6
 3d2:	88 b9       	out	0x08, r24	; 8
			break;
 3d4:	2f c0       	rjmp	.+94     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 5:
			PORTD |= 0b11010000;
 3d6:	8b b1       	in	r24, 0x0b	; 11
 3d8:	80 6d       	ori	r24, 0xD0	; 208
 3da:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000110;
 3dc:	88 b1       	in	r24, 0x08	; 8
 3de:	86 60       	ori	r24, 0x06	; 6
 3e0:	88 b9       	out	0x08, r24	; 8
			break;
 3e2:	28 c0       	rjmp	.+80     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 6:
			PORTD |= 0b11010000;
 3e4:	8b b1       	in	r24, 0x0b	; 11
 3e6:	80 6d       	ori	r24, 0xD0	; 208
 3e8:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000111;
 3ea:	88 b1       	in	r24, 0x08	; 8
 3ec:	87 60       	ori	r24, 0x07	; 7
 3ee:	88 b9       	out	0x08, r24	; 8
			break;
 3f0:	21 c0       	rjmp	.+66     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 7:
			PORTD |= 0b01110000;
 3f2:	8b b1       	in	r24, 0x0b	; 11
 3f4:	80 67       	ori	r24, 0x70	; 112
 3f6:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000000;
 3f8:	88 b1       	in	r24, 0x08	; 8
 3fa:	88 b9       	out	0x08, r24	; 8
			break;
 3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 8:
			PORTD |= 0b11110000;
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	80 6f       	ori	r24, 0xF0	; 240
 402:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000111;
 404:	88 b1       	in	r24, 0x08	; 8
 406:	87 60       	ori	r24, 0x07	; 7
 408:	88 b9       	out	0x08, r24	; 8
			break;
 40a:	14 c0       	rjmp	.+40     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		case 9:
			PORTD |= 0b01110000;
 40c:	8b b1       	in	r24, 0x0b	; 11
 40e:	80 67       	ori	r24, 0x70	; 112
 410:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000110;
 412:	88 b1       	in	r24, 0x08	; 8
 414:	86 60       	ori	r24, 0x06	; 6
 416:	88 b9       	out	0x08, r24	; 8
			break;
 418:	0d c0       	rjmp	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		
		// Imprime 'E' (Error)
		case 10:
			PORTD |= 0b10010000;
 41a:	8b b1       	in	r24, 0x0b	; 11
 41c:	80 69       	ori	r24, 0x90	; 144
 41e:	8b b9       	out	0x0b, r24	; 11
			PORTC |= 0b00000111;
 420:	88 b1       	in	r24, 0x08	; 8
 422:	87 60       	ori	r24, 0x07	; 7
 424:	88 b9       	out	0x08, r24	; 8
 426:	08 95       	ret
			break;
	}
	
	// Punto decimal
	if ( position == 1 && digit != 10 )
 428:	91 30       	cpi	r25, 0x01	; 1
 42a:	31 f4       	brne	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42c:	8a 30       	cpi	r24, 0x0A	; 10
 42e:	21 f0       	breq	.+8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		PORTC |= (1 << PORTC3);
 430:	43 9a       	sbi	0x08, 3	; 8
	
	return;
 432:	08 95       	ret
			PORTC |= 0b00000111;
			break;
	}
	
	// Punto decimal
	if ( position == 1 && digit != 10 )
 434:	91 30       	cpi	r25, 0x01	; 1
 436:	e1 f3       	breq	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	08 95       	ret

0000043a <main>:
	}
}


int main(void)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	e4 97       	sbiw	r28, 0x34	; 52
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
	// System setup
	system_setup();
 44e:	0e 94 53 00 	call	0xa6	; 0xa6 <system_setup>
	
	// Local variables
	float number = 0; // Numero obtenido por cada medida del sensor
	float data[DATAMAX] = {0}; // Conjunto de datos tomados por el sensor
 452:	fe 01       	movw	r30, r28
 454:	31 96       	adiw	r30, 0x01	; 1
 456:	88 e2       	ldi	r24, 0x28	; 40
 458:	df 01       	movw	r26, r30
 45a:	1d 92       	st	X+, r1
 45c:	8a 95       	dec	r24
 45e:	e9 f7       	brne	.-6      	; 0x45a <main+0x20>
	char modes = '0'; // Modos: Centimetros y Pulgadas
	uint8_t digit[LCDS]; // Digitos separados para visualizar
	
	float echo = 0.0, time_up = 0.0, time_down = 0.0; // Tiempos del eco
	
	uint16_t delay_count_1 = 0, delay_count_2 = 0; // Contadores de ciclos o delays
 460:	1e a6       	std	Y+46, r1	; 0x2e
 462:	1d a6       	std	Y+45, r1	; 0x2d
 464:	18 aa       	std	Y+48, r1	; 0x30
 466:	1f a6       	std	Y+47, r1	; 0x2f
	float data[DATAMAX] = {0}; // Conjunto de datos tomados por el sensor
	uint8_t position_number = 0; // Posicion del digito a imprimir en el display
	char modes = '0'; // Modos: Centimetros y Pulgadas
	uint8_t digit[LCDS]; // Digitos separados para visualizar
	
	float echo = 0.0, time_up = 0.0, time_down = 0.0; // Tiempos del eco
 468:	19 aa       	std	Y+49, r1	; 0x31
 46a:	1a aa       	std	Y+50, r1	; 0x32
 46c:	1b aa       	std	Y+51, r1	; 0x33
 46e:	1c aa       	std	Y+52, r1	; 0x34
 470:	41 2c       	mov	r4, r1
 472:	51 2c       	mov	r5, r1
 474:	32 01       	movw	r6, r4
	
	// Local variables
	float number = 0; // Numero obtenido por cada medida del sensor
	float data[DATAMAX] = {0}; // Conjunto de datos tomados por el sensor
	uint8_t position_number = 0; // Posicion del digito a imprimir en el display
	char modes = '0'; // Modos: Centimetros y Pulgadas
 476:	0f 2e       	mov	r0, r31
 478:	f0 e3       	ldi	r31, 0x30	; 48
 47a:	bf 2e       	mov	r11, r31
 47c:	f0 2d       	mov	r31, r0
	system_setup();
	
	// Local variables
	float number = 0; // Numero obtenido por cada medida del sensor
	float data[DATAMAX] = {0}; // Conjunto de datos tomados por el sensor
	uint8_t position_number = 0; // Posicion del digito a imprimir en el display
 47e:	10 e0       	ldi	r17, 0x00	; 0
{
	// System setup
	system_setup();
	
	// Local variables
	float number = 0; // Numero obtenido por cada medida del sensor
 480:	73 01       	movw	r14, r6
 482:	62 01       	movw	r12, r4
		{
			PORTD |= (1 << PORTD3);
			__builtin_avr_delay_cycles(DELAY_10_US);
			PORTD &= ~(1 << PORTD3);
			
			TCNT1 = 0; //colocando el contador del timer1 en 0 para cuando inicie el echo			
 484:	0f 2e       	mov	r0, r31
 486:	f4 e8       	ldi	r31, 0x84	; 132
 488:	2f 2e       	mov	r2, r31
 48a:	31 2c       	mov	r3, r1
 48c:	f0 2d       	mov	r31, r0
			if ( (TIFR1 & (1<<5)) ) //detectar si hubo una captura de datos
			{
				//si hubo una captura
				TIFR1 &= ~(1 << 5); //Colocando la bandera de captura en 0 de nuevo
				
				if ( (TCCR1B & (1 << ICES1)) ) // si estaba capturando el flanco possitivo
 48e:	0f 2e       	mov	r0, r31
 490:	f1 e8       	ldi	r31, 0x81	; 129
 492:	8f 2e       	mov	r8, r31
 494:	91 2c       	mov	r9, r1
 496:	f0 2d       	mov	r31, r0
    while (1)
    {
		// ----------------------------------
		//        ULTRASONIC SENSOR
		// ----------------------------------
		if ( delay_loop_counter(&delay_count_1,DELAY_100_MS_COUNT) )
 498:	69 e1       	ldi	r22, 0x19	; 25
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	ce 01       	movw	r24, r28
 49e:	8d 96       	adiw	r24, 0x2d	; 45
 4a0:	0e 94 76 00 	call	0xec	; 0xec <delay_loop_counter>
 4a4:	88 23       	and	r24, r24
 4a6:	09 f4       	brne	.+2      	; 0x4aa <main+0x70>
 4a8:	48 c0       	rjmp	.+144    	; 0x53a <main+0x100>
		{
			PORTD |= (1 << PORTD3);
 4aa:	5b 9a       	sbi	0x0b, 3	; 11
			__builtin_avr_delay_cycles(DELAY_10_US);
 4ac:	b5 e3       	ldi	r27, 0x35	; 53
 4ae:	ba 95       	dec	r27
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <main+0x74>
 4b2:	00 00       	nop
			PORTD &= ~(1 << PORTD3);
 4b4:	5b 98       	cbi	0x0b, 3	; 11
			
			TCNT1 = 0; //colocando el contador del timer1 en 0 para cuando inicie el echo			
 4b6:	f1 01       	movw	r30, r2
 4b8:	11 82       	std	Z+1, r1	; 0x01
 4ba:	10 82       	st	Z, r1
			 
			if ( (TIFR1 & (1<<5)) ) //detectar si hubo una captura de datos
 4bc:	b5 9b       	sbis	0x16, 5	; 22
 4be:	2d c0       	rjmp	.+90     	; 0x51a <main+0xe0>
			{
				//si hubo una captura
				TIFR1 &= ~(1 << 5); //Colocando la bandera de captura en 0 de nuevo
 4c0:	b5 98       	cbi	0x16, 5	; 22
				
				if ( (TCCR1B & (1 << ICES1)) ) // si estaba capturando el flanco possitivo
 4c2:	d4 01       	movw	r26, r8
 4c4:	8c 91       	ld	r24, X
 4c6:	86 ff       	sbrs	r24, 6
 4c8:	11 c0       	rjmp	.+34     	; 0x4ec <main+0xb2>
				{
					time_up = ICR1;
 4ca:	e6 e8       	ldi	r30, 0x86	; 134
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	60 81       	ld	r22, Z
 4d0:	71 81       	ldd	r23, Z+1	; 0x01
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 02 04 	call	0x804	; 0x804 <__floatunsisf>
 4da:	69 ab       	std	Y+49, r22	; 0x31
 4dc:	7a ab       	std	Y+50, r23	; 0x32
 4de:	8b ab       	std	Y+51, r24	; 0x33
 4e0:	9c ab       	std	Y+52, r25	; 0x34
					TCCR1B &= ~(1 << ICES1); //Para capturar el flanco negativo (poniendolo en 0)
 4e2:	d4 01       	movw	r26, r8
 4e4:	8c 91       	ld	r24, X
 4e6:	8f 7b       	andi	r24, 0xBF	; 191
 4e8:	8c 93       	st	X, r24
 4ea:	17 c0       	rjmp	.+46     	; 0x51a <main+0xe0>
				}	 
				else
					if ( (TCCR1B & (1 << ICES1)) == 0 ) // si estaba capturando el flanco negativo
 4ec:	f4 01       	movw	r30, r8
 4ee:	80 81       	ld	r24, Z
 4f0:	86 fd       	sbrc	r24, 6
 4f2:	13 c0       	rjmp	.+38     	; 0x51a <main+0xe0>
					{
						time_down = ICR1;
 4f4:	a6 e8       	ldi	r26, 0x86	; 134
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	6d 91       	ld	r22, X+
 4fa:	7c 91       	ld	r23, X
						TCCR1B |= (1 << ICES1); // Para capturar el flanco Positivo (volviendo a ponerlo en 1)
 4fc:	80 81       	ld	r24, Z
 4fe:	80 64       	ori	r24, 0x40	; 64
 500:	80 83       	st	Z, r24
						echo = (time_down - time_up);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 02 04 	call	0x804	; 0x804 <__floatunsisf>
 50a:	29 a9       	ldd	r18, Y+49	; 0x31
 50c:	3a a9       	ldd	r19, Y+50	; 0x32
 50e:	4b a9       	ldd	r20, Y+51	; 0x33
 510:	5c a9       	ldd	r21, Y+52	; 0x34
 512:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__subsf3>
 516:	2b 01       	movw	r4, r22
 518:	3c 01       	movw	r6, r24
					}
			}
			
			number = FORMULA * echo; // Obtiene la distancia real
 51a:	26 e9       	ldi	r18, 0x96	; 150
 51c:	33 e4       	ldi	r19, 0x43	; 67
 51e:	4b e0       	ldi	r20, 0x0B	; 11
 520:	5c e3       	ldi	r21, 0x3C	; 60
 522:	c3 01       	movw	r24, r6
 524:	b2 01       	movw	r22, r4
 526:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 52a:	6b 01       	movw	r12, r22
 52c:	7c 01       	movw	r14, r24
			data_update(data,number); // Actualiza el pack de datos obtenidos
 52e:	ab 01       	movw	r20, r22
 530:	bc 01       	movw	r22, r24
 532:	ce 01       	movw	r24, r28
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	0e 94 87 00 	call	0x10e	; 0x10e <data_update>
		// ----------------------------------
		//    4 DIGIT - 7 SEGMENTS DISPLAY
		// ----------------------------------

		// Tiempo de actualizacion de los datos
		if ( delay_loop_counter(&delay_count_2,DELAY_100_MS_COUNT) )
 53a:	69 e1       	ldi	r22, 0x19	; 25
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	ce 01       	movw	r24, r28
 540:	8f 96       	adiw	r24, 0x2f	; 47
 542:	0e 94 76 00 	call	0xec	; 0xec <delay_loop_counter>
 546:	88 23       	and	r24, r24
 548:	19 f1       	breq	.+70     	; 0x590 <main+0x156>
		{	
			// Si el boton esta precionado: convierte a pulgada
			if ( (PIND & (1 << PORTD2)) != 0 )
 54a:	4a 9b       	sbis	0x09, 2	; 9
 54c:	11 c0       	rjmp	.+34     	; 0x570 <main+0x136>
			{
				modes = '1'; // Modo pulgada ('1') seleccionado
				number = data_average(data,modes); // Pormedio de datos obtenido en pulgadas
 54e:	61 e3       	ldi	r22, 0x31	; 49
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	0e 94 9f 00 	call	0x13e	; 0x13e <data_average>
 558:	6b 01       	movw	r12, r22
 55a:	7c 01       	movw	r14, r24
				data_divisor(number,digit); // Separador de digitos
 55c:	ae 01       	movw	r20, r28
 55e:	47 5d       	subi	r20, 0xD7	; 215
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <data_divisor>
		if ( delay_loop_counter(&delay_count_2,DELAY_100_MS_COUNT) )
		{	
			// Si el boton esta precionado: convierte a pulgada
			if ( (PIND & (1 << PORTD2)) != 0 )
			{
				modes = '1'; // Modo pulgada ('1') seleccionado
 566:	0f 2e       	mov	r0, r31
 568:	f1 e3       	ldi	r31, 0x31	; 49
 56a:	bf 2e       	mov	r11, r31
 56c:	f0 2d       	mov	r31, r0
 56e:	10 c0       	rjmp	.+32     	; 0x590 <main+0x156>
			}
			// Si el boton no esta precionado: convierte a centimetro
			else
			{
				modes = '0'; // Modo centimetro ('0') seleccionado				
				number = data_average(data,modes); // Promedio de datos obtenidos en centimetros
 570:	60 e3       	ldi	r22, 0x30	; 48
 572:	ce 01       	movw	r24, r28
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	0e 94 9f 00 	call	0x13e	; 0x13e <data_average>
 57a:	6b 01       	movw	r12, r22
 57c:	7c 01       	movw	r14, r24
				data_divisor(number,digit); // Separador de digitos
 57e:	ae 01       	movw	r20, r28
 580:	47 5d       	subi	r20, 0xD7	; 215
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <data_divisor>
				data_divisor(number,digit); // Separador de digitos
			}
			// Si el boton no esta precionado: convierte a centimetro
			else
			{
				modes = '0'; // Modo centimetro ('0') seleccionado				
 588:	0f 2e       	mov	r0, r31
 58a:	f0 e3       	ldi	r31, 0x30	; 48
 58c:	bf 2e       	mov	r11, r31
 58e:	f0 2d       	mov	r31, r0
				number = data_average(data,modes); // Promedio de datos obtenidos en centimetros
				data_divisor(number,digit); // Separador de digitos
			}
		}

		display_dynamic(position_number,number,digit,modes); // Dinamizar segun los datos (Digito a imprimir,numero,tipo de modo)
 590:	0b 2d       	mov	r16, r11
 592:	9e 01       	movw	r18, r28
 594:	27 5d       	subi	r18, 0xD7	; 215
 596:	3f 4f       	sbci	r19, 0xFF	; 255
 598:	b7 01       	movw	r22, r14
 59a:	a6 01       	movw	r20, r12
 59c:	81 2f       	mov	r24, r17
 59e:	0e 94 02 01 	call	0x204	; 0x204 <display_dynamic>
		display_clear(); // Limpiar pantalla (registros) para sobreescribir los datos
 5a2:	0e 94 96 01 	call	0x32c	; 0x32c <display_clear>
		display_print(digit[position_number],position_number); // Imprime el dato segun el digito en la posicion
 5a6:	e9 e2       	ldi	r30, 0x29	; 41
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ec 0f       	add	r30, r28
 5ac:	fd 1f       	adc	r31, r29
 5ae:	e1 0f       	add	r30, r17
 5b0:	f1 1d       	adc	r31, r1
 5b2:	61 2f       	mov	r22, r17
 5b4:	80 81       	ld	r24, Z
 5b6:	0e 94 bf 01 	call	0x37e	; 0x37e <display_print>
		
		// Selector de posicion
		position_number ++; // Aumenta cada ciclo de while (4ms)
 5ba:	1f 5f       	subi	r17, 0xFF	; 255
		if ( position_number > (LCDS - 1) ) //  Limita a la maxima cantidad de digitos
 5bc:	14 30       	cpi	r17, 0x04	; 4
 5be:	08 f0       	brcs	.+2      	; 0x5c2 <main+0x188>
			position_number = 0; // Vuelve al primer digito una vez alcanzado el tope
 5c0:	10 e0       	ldi	r17, 0x00	; 0
		// ----------------------------------
		//          MASTER CLOCK
		// ----------------------------------
		
		// Reloj general, 4ms por ciclo de while (aproximadamente)
		__builtin_avr_delay_cycles(DELAY_4_MS);
 5c2:	ef e7       	ldi	r30, 0x7F	; 127
 5c4:	fe e3       	ldi	r31, 0x3E	; 62
 5c6:	31 97       	sbiw	r30, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x18c>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x192>
 5cc:	00 00       	nop
	}
 5ce:	64 cf       	rjmp	.-312    	; 0x498 <main+0x5e>

000005d0 <__subsf3>:
 5d0:	50 58       	subi	r21, 0x80	; 128

000005d2 <__addsf3>:
 5d2:	bb 27       	eor	r27, r27
 5d4:	aa 27       	eor	r26, r26
 5d6:	0e 94 00 03 	call	0x600	; 0x600 <__addsf3x>
 5da:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 5de:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 5e2:	38 f0       	brcs	.+14     	; 0x5f2 <__addsf3+0x20>
 5e4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__addsf3+0x20>
 5ea:	39 f4       	brne	.+14     	; 0x5fa <__addsf3+0x28>
 5ec:	9f 3f       	cpi	r25, 0xFF	; 255
 5ee:	19 f4       	brne	.+6      	; 0x5f6 <__addsf3+0x24>
 5f0:	26 f4       	brtc	.+8      	; 0x5fa <__addsf3+0x28>
 5f2:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>
 5f6:	0e f4       	brtc	.+2      	; 0x5fa <__addsf3+0x28>
 5f8:	e0 95       	com	r30
 5fa:	e7 fb       	bst	r30, 7
 5fc:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>

00000600 <__addsf3x>:
 600:	e9 2f       	mov	r30, r25
 602:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_split3>
 606:	58 f3       	brcs	.-42     	; 0x5de <__addsf3+0xc>
 608:	ba 17       	cp	r27, r26
 60a:	62 07       	cpc	r22, r18
 60c:	73 07       	cpc	r23, r19
 60e:	84 07       	cpc	r24, r20
 610:	95 07       	cpc	r25, r21
 612:	20 f0       	brcs	.+8      	; 0x61c <__addsf3x+0x1c>
 614:	79 f4       	brne	.+30     	; 0x634 <__addsf3x+0x34>
 616:	a6 f5       	brtc	.+104    	; 0x680 <__addsf3x+0x80>
 618:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_zero>
 61c:	0e f4       	brtc	.+2      	; 0x620 <__addsf3x+0x20>
 61e:	e0 95       	com	r30
 620:	0b 2e       	mov	r0, r27
 622:	ba 2f       	mov	r27, r26
 624:	a0 2d       	mov	r26, r0
 626:	0b 01       	movw	r0, r22
 628:	b9 01       	movw	r22, r18
 62a:	90 01       	movw	r18, r0
 62c:	0c 01       	movw	r0, r24
 62e:	ca 01       	movw	r24, r20
 630:	a0 01       	movw	r20, r0
 632:	11 24       	eor	r1, r1
 634:	ff 27       	eor	r31, r31
 636:	59 1b       	sub	r21, r25
 638:	99 f0       	breq	.+38     	; 0x660 <__addsf3x+0x60>
 63a:	59 3f       	cpi	r21, 0xF9	; 249
 63c:	50 f4       	brcc	.+20     	; 0x652 <__addsf3x+0x52>
 63e:	50 3e       	cpi	r21, 0xE0	; 224
 640:	68 f1       	brcs	.+90     	; 0x69c <__addsf3x+0x9c>
 642:	1a 16       	cp	r1, r26
 644:	f0 40       	sbci	r31, 0x00	; 0
 646:	a2 2f       	mov	r26, r18
 648:	23 2f       	mov	r18, r19
 64a:	34 2f       	mov	r19, r20
 64c:	44 27       	eor	r20, r20
 64e:	58 5f       	subi	r21, 0xF8	; 248
 650:	f3 cf       	rjmp	.-26     	; 0x638 <__addsf3x+0x38>
 652:	46 95       	lsr	r20
 654:	37 95       	ror	r19
 656:	27 95       	ror	r18
 658:	a7 95       	ror	r26
 65a:	f0 40       	sbci	r31, 0x00	; 0
 65c:	53 95       	inc	r21
 65e:	c9 f7       	brne	.-14     	; 0x652 <__addsf3x+0x52>
 660:	7e f4       	brtc	.+30     	; 0x680 <__addsf3x+0x80>
 662:	1f 16       	cp	r1, r31
 664:	ba 0b       	sbc	r27, r26
 666:	62 0b       	sbc	r22, r18
 668:	73 0b       	sbc	r23, r19
 66a:	84 0b       	sbc	r24, r20
 66c:	ba f0       	brmi	.+46     	; 0x69c <__addsf3x+0x9c>
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	a1 f0       	breq	.+40     	; 0x69a <__addsf3x+0x9a>
 672:	ff 0f       	add	r31, r31
 674:	bb 1f       	adc	r27, r27
 676:	66 1f       	adc	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	c2 f7       	brpl	.-16     	; 0x66e <__addsf3x+0x6e>
 67e:	0e c0       	rjmp	.+28     	; 0x69c <__addsf3x+0x9c>
 680:	ba 0f       	add	r27, r26
 682:	62 1f       	adc	r22, r18
 684:	73 1f       	adc	r23, r19
 686:	84 1f       	adc	r24, r20
 688:	48 f4       	brcc	.+18     	; 0x69c <__addsf3x+0x9c>
 68a:	87 95       	ror	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b7 95       	ror	r27
 692:	f7 95       	ror	r31
 694:	9e 3f       	cpi	r25, 0xFE	; 254
 696:	08 f0       	brcs	.+2      	; 0x69a <__addsf3x+0x9a>
 698:	b0 cf       	rjmp	.-160    	; 0x5fa <__addsf3+0x28>
 69a:	93 95       	inc	r25
 69c:	88 0f       	add	r24, r24
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <__addsf3x+0xa2>
 6a0:	99 27       	eor	r25, r25
 6a2:	ee 0f       	add	r30, r30
 6a4:	97 95       	ror	r25
 6a6:	87 95       	ror	r24
 6a8:	08 95       	ret

000006aa <__cmpsf2>:
 6aa:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_cmp>
 6ae:	08 f4       	brcc	.+2      	; 0x6b2 <__cmpsf2+0x8>
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	08 95       	ret

000006b4 <__divsf3>:
 6b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__divsf3x>
 6b8:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 6bc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 6c0:	58 f0       	brcs	.+22     	; 0x6d8 <__divsf3+0x24>
 6c2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__divsf3+0x24>
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <__divsf3+0x20>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	29 f0       	breq	.+10     	; 0x6d8 <__divsf3+0x24>
 6ce:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 6d2:	51 11       	cpse	r21, r1
 6d4:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 6d8:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>

000006dc <__divsf3x>:
 6dc:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_split3>
 6e0:	68 f3       	brcs	.-38     	; 0x6bc <__divsf3+0x8>

000006e2 <__divsf3_pse>:
 6e2:	99 23       	and	r25, r25
 6e4:	b1 f3       	breq	.-20     	; 0x6d2 <__divsf3+0x1e>
 6e6:	55 23       	and	r21, r21
 6e8:	91 f3       	breq	.-28     	; 0x6ce <__divsf3+0x1a>
 6ea:	95 1b       	sub	r25, r21
 6ec:	55 0b       	sbc	r21, r21
 6ee:	bb 27       	eor	r27, r27
 6f0:	aa 27       	eor	r26, r26
 6f2:	62 17       	cp	r22, r18
 6f4:	73 07       	cpc	r23, r19
 6f6:	84 07       	cpc	r24, r20
 6f8:	38 f0       	brcs	.+14     	; 0x708 <__divsf3_pse+0x26>
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	5f 4f       	sbci	r21, 0xFF	; 255
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	44 1f       	adc	r20, r20
 704:	aa 1f       	adc	r26, r26
 706:	a9 f3       	breq	.-22     	; 0x6f2 <__divsf3_pse+0x10>
 708:	35 d0       	rcall	.+106    	; 0x774 <__divsf3_pse+0x92>
 70a:	0e 2e       	mov	r0, r30
 70c:	3a f0       	brmi	.+14     	; 0x71c <__divsf3_pse+0x3a>
 70e:	e0 e8       	ldi	r30, 0x80	; 128
 710:	32 d0       	rcall	.+100    	; 0x776 <__divsf3_pse+0x94>
 712:	91 50       	subi	r25, 0x01	; 1
 714:	50 40       	sbci	r21, 0x00	; 0
 716:	e6 95       	lsr	r30
 718:	00 1c       	adc	r0, r0
 71a:	ca f7       	brpl	.-14     	; 0x70e <__divsf3_pse+0x2c>
 71c:	2b d0       	rcall	.+86     	; 0x774 <__divsf3_pse+0x92>
 71e:	fe 2f       	mov	r31, r30
 720:	29 d0       	rcall	.+82     	; 0x774 <__divsf3_pse+0x92>
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	bb 1f       	adc	r27, r27
 72a:	26 17       	cp	r18, r22
 72c:	37 07       	cpc	r19, r23
 72e:	48 07       	cpc	r20, r24
 730:	ab 07       	cpc	r26, r27
 732:	b0 e8       	ldi	r27, 0x80	; 128
 734:	09 f0       	breq	.+2      	; 0x738 <__divsf3_pse+0x56>
 736:	bb 0b       	sbc	r27, r27
 738:	80 2d       	mov	r24, r0
 73a:	bf 01       	movw	r22, r30
 73c:	ff 27       	eor	r31, r31
 73e:	93 58       	subi	r25, 0x83	; 131
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x70>
 744:	9e 3f       	cpi	r25, 0xFE	; 254
 746:	51 05       	cpc	r21, r1
 748:	78 f0       	brcs	.+30     	; 0x768 <__divsf3_pse+0x86>
 74a:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 74e:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	e4 f3       	brlt	.-8      	; 0x74e <__divsf3_pse+0x6c>
 756:	98 3e       	cpi	r25, 0xE8	; 232
 758:	d4 f3       	brlt	.-12     	; 0x74e <__divsf3_pse+0x6c>
 75a:	86 95       	lsr	r24
 75c:	77 95       	ror	r23
 75e:	67 95       	ror	r22
 760:	b7 95       	ror	r27
 762:	f7 95       	ror	r31
 764:	9f 5f       	subi	r25, 0xFF	; 255
 766:	c9 f7       	brne	.-14     	; 0x75a <__divsf3_pse+0x78>
 768:	88 0f       	add	r24, r24
 76a:	91 1d       	adc	r25, r1
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret
 774:	e1 e0       	ldi	r30, 0x01	; 1
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	bb 1f       	adc	r27, r27
 77e:	62 17       	cp	r22, r18
 780:	73 07       	cpc	r23, r19
 782:	84 07       	cpc	r24, r20
 784:	ba 07       	cpc	r27, r26
 786:	20 f0       	brcs	.+8      	; 0x790 <__divsf3_pse+0xae>
 788:	62 1b       	sub	r22, r18
 78a:	73 0b       	sbc	r23, r19
 78c:	84 0b       	sbc	r24, r20
 78e:	ba 0b       	sbc	r27, r26
 790:	ee 1f       	adc	r30, r30
 792:	88 f7       	brcc	.-30     	; 0x776 <__divsf3_pse+0x94>
 794:	e0 95       	com	r30
 796:	08 95       	ret

00000798 <__fixsfsi>:
 798:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 79c:	68 94       	set
 79e:	b1 11       	cpse	r27, r1
 7a0:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 7a4:	08 95       	ret

000007a6 <__fixunssfsi>:
 7a6:	0e 94 93 04 	call	0x926	; 0x926 <__fp_splitA>
 7aa:	88 f0       	brcs	.+34     	; 0x7ce <__fixunssfsi+0x28>
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fixunssfsi+0x30>
 7b0:	b9 2f       	mov	r27, r25
 7b2:	99 27       	eor	r25, r25
 7b4:	b7 51       	subi	r27, 0x17	; 23
 7b6:	b0 f0       	brcs	.+44     	; 0x7e4 <__fixunssfsi+0x3e>
 7b8:	e1 f0       	breq	.+56     	; 0x7f2 <__fixunssfsi+0x4c>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a f0       	brmi	.+6      	; 0x7ca <__fixunssfsi+0x24>
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__fixunssfsi+0x14>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fixunssfsi+0x4c>
 7ca:	b1 30       	cpi	r27, 0x01	; 1
 7cc:	91 f0       	breq	.+36     	; 0x7f2 <__fixunssfsi+0x4c>
 7ce:	0e 94 ad 04 	call	0x95a	; 0x95a <__fp_zero>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_zero>
 7da:	67 2f       	mov	r22, r23
 7dc:	78 2f       	mov	r23, r24
 7de:	88 27       	eor	r24, r24
 7e0:	b8 5f       	subi	r27, 0xF8	; 248
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__fixunssfsi+0x4c>
 7e4:	b9 3f       	cpi	r27, 0xF9	; 249
 7e6:	cc f3       	brlt	.-14     	; 0x7da <__fixunssfsi+0x34>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b3 95       	inc	r27
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__fixunssfsi+0x42>
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__fixunssfsi+0x5c>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__floatsisf+0x6c>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__floatsisf+0x6c>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__floatsisf+0x6c>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__floatsisf+0x6a>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__floatsisf+0x5e>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__floatsisf+0x74>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__floatsisf+0x6c>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__floatsisf+0x62>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_cmp>:
 87e:	99 0f       	add	r25, r25
 880:	00 08       	sbc	r0, r0
 882:	55 0f       	add	r21, r21
 884:	aa 0b       	sbc	r26, r26
 886:	e0 e8       	ldi	r30, 0x80	; 128
 888:	fe ef       	ldi	r31, 0xFE	; 254
 88a:	16 16       	cp	r1, r22
 88c:	17 06       	cpc	r1, r23
 88e:	e8 07       	cpc	r30, r24
 890:	f9 07       	cpc	r31, r25
 892:	c0 f0       	brcs	.+48     	; 0x8c4 <__fp_cmp+0x46>
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	e4 07       	cpc	r30, r20
 89a:	f5 07       	cpc	r31, r21
 89c:	98 f0       	brcs	.+38     	; 0x8c4 <__fp_cmp+0x46>
 89e:	62 1b       	sub	r22, r18
 8a0:	73 0b       	sbc	r23, r19
 8a2:	84 0b       	sbc	r24, r20
 8a4:	95 0b       	sbc	r25, r21
 8a6:	39 f4       	brne	.+14     	; 0x8b6 <__fp_cmp+0x38>
 8a8:	0a 26       	eor	r0, r26
 8aa:	61 f0       	breq	.+24     	; 0x8c4 <__fp_cmp+0x46>
 8ac:	23 2b       	or	r18, r19
 8ae:	24 2b       	or	r18, r20
 8b0:	25 2b       	or	r18, r21
 8b2:	21 f4       	brne	.+8      	; 0x8bc <__fp_cmp+0x3e>
 8b4:	08 95       	ret
 8b6:	0a 26       	eor	r0, r26
 8b8:	09 f4       	brne	.+2      	; 0x8bc <__fp_cmp+0x3e>
 8ba:	a1 40       	sbci	r26, 0x01	; 1
 8bc:	a6 95       	lsr	r26
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	81 1d       	adc	r24, r1
 8c2:	81 1d       	adc	r24, r1
 8c4:	08 95       	ret

000008c6 <__fp_inf>:
 8c6:	97 f9       	bld	r25, 7
 8c8:	9f 67       	ori	r25, 0x7F	; 127
 8ca:	80 e8       	ldi	r24, 0x80	; 128
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	08 95       	ret

000008d2 <__fp_nan>:
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	80 ec       	ldi	r24, 0xC0	; 192
 8d6:	08 95       	ret

000008d8 <__fp_pscA>:
 8d8:	00 24       	eor	r0, r0
 8da:	0a 94       	dec	r0
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	18 06       	cpc	r1, r24
 8e2:	09 06       	cpc	r0, r25
 8e4:	08 95       	ret

000008e6 <__fp_pscB>:
 8e6:	00 24       	eor	r0, r0
 8e8:	0a 94       	dec	r0
 8ea:	12 16       	cp	r1, r18
 8ec:	13 06       	cpc	r1, r19
 8ee:	14 06       	cpc	r1, r20
 8f0:	05 06       	cpc	r0, r21
 8f2:	08 95       	ret

000008f4 <__fp_round>:
 8f4:	09 2e       	mov	r0, r25
 8f6:	03 94       	inc	r0
 8f8:	00 0c       	add	r0, r0
 8fa:	11 f4       	brne	.+4      	; 0x900 <__stack+0x1>
 8fc:	88 23       	and	r24, r24
 8fe:	52 f0       	brmi	.+20     	; 0x914 <__stack+0x15>
 900:	bb 0f       	add	r27, r27
 902:	40 f4       	brcc	.+16     	; 0x914 <__stack+0x15>
 904:	bf 2b       	or	r27, r31
 906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xd>
 908:	60 ff       	sbrs	r22, 0
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
 90c:	6f 5f       	subi	r22, 0xFF	; 255
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	08 95       	ret

00000916 <__fp_split3>:
 916:	57 fd       	sbrc	r21, 7
 918:	90 58       	subi	r25, 0x80	; 128
 91a:	44 0f       	add	r20, r20
 91c:	55 1f       	adc	r21, r21
 91e:	59 f0       	breq	.+22     	; 0x936 <__fp_splitA+0x10>
 920:	5f 3f       	cpi	r21, 0xFF	; 255
 922:	71 f0       	breq	.+28     	; 0x940 <__fp_splitA+0x1a>
 924:	47 95       	ror	r20

00000926 <__fp_splitA>:
 926:	88 0f       	add	r24, r24
 928:	97 fb       	bst	r25, 7
 92a:	99 1f       	adc	r25, r25
 92c:	61 f0       	breq	.+24     	; 0x946 <__fp_splitA+0x20>
 92e:	9f 3f       	cpi	r25, 0xFF	; 255
 930:	79 f0       	breq	.+30     	; 0x950 <__fp_splitA+0x2a>
 932:	87 95       	ror	r24
 934:	08 95       	ret
 936:	12 16       	cp	r1, r18
 938:	13 06       	cpc	r1, r19
 93a:	14 06       	cpc	r1, r20
 93c:	55 1f       	adc	r21, r21
 93e:	f2 cf       	rjmp	.-28     	; 0x924 <__fp_split3+0xe>
 940:	46 95       	lsr	r20
 942:	f1 df       	rcall	.-30     	; 0x926 <__fp_splitA>
 944:	08 c0       	rjmp	.+16     	; 0x956 <__fp_splitA+0x30>
 946:	16 16       	cp	r1, r22
 948:	17 06       	cpc	r1, r23
 94a:	18 06       	cpc	r1, r24
 94c:	99 1f       	adc	r25, r25
 94e:	f1 cf       	rjmp	.-30     	; 0x932 <__fp_splitA+0xc>
 950:	86 95       	lsr	r24
 952:	71 05       	cpc	r23, r1
 954:	61 05       	cpc	r22, r1
 956:	08 94       	sec
 958:	08 95       	ret

0000095a <__fp_zero>:
 95a:	e8 94       	clt

0000095c <__fp_szero>:
 95c:	bb 27       	eor	r27, r27
 95e:	66 27       	eor	r22, r22
 960:	77 27       	eor	r23, r23
 962:	cb 01       	movw	r24, r22
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <__gesf2>:
 968:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_cmp>
 96c:	08 f4       	brcc	.+2      	; 0x970 <__gesf2+0x8>
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	08 95       	ret

00000972 <__mulsf3>:
 972:	0e 94 cc 04 	call	0x998	; 0x998 <__mulsf3x>
 976:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 97a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 97e:	38 f0       	brcs	.+14     	; 0x98e <__mulsf3+0x1c>
 980:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 984:	20 f0       	brcs	.+8      	; 0x98e <__mulsf3+0x1c>
 986:	95 23       	and	r25, r21
 988:	11 f0       	breq	.+4      	; 0x98e <__mulsf3+0x1c>
 98a:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 98e:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>
 992:	11 24       	eor	r1, r1
 994:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>

00000998 <__mulsf3x>:
 998:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_split3>
 99c:	70 f3       	brcs	.-36     	; 0x97a <__mulsf3+0x8>

0000099e <__mulsf3_pse>:
 99e:	95 9f       	mul	r25, r21
 9a0:	c1 f3       	breq	.-16     	; 0x992 <__mulsf3+0x20>
 9a2:	95 0f       	add	r25, r21
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	55 1f       	adc	r21, r21
 9a8:	62 9f       	mul	r22, r18
 9aa:	f0 01       	movw	r30, r0
 9ac:	72 9f       	mul	r23, r18
 9ae:	bb 27       	eor	r27, r27
 9b0:	f0 0d       	add	r31, r0
 9b2:	b1 1d       	adc	r27, r1
 9b4:	63 9f       	mul	r22, r19
 9b6:	aa 27       	eor	r26, r26
 9b8:	f0 0d       	add	r31, r0
 9ba:	b1 1d       	adc	r27, r1
 9bc:	aa 1f       	adc	r26, r26
 9be:	64 9f       	mul	r22, r20
 9c0:	66 27       	eor	r22, r22
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	66 1f       	adc	r22, r22
 9c8:	82 9f       	mul	r24, r18
 9ca:	22 27       	eor	r18, r18
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 9f       	mul	r23, r19
 9d4:	b0 0d       	add	r27, r0
 9d6:	a1 1d       	adc	r26, r1
 9d8:	62 1f       	adc	r22, r18
 9da:	83 9f       	mul	r24, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	22 1f       	adc	r18, r18
 9e2:	74 9f       	mul	r23, r20
 9e4:	33 27       	eor	r19, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	23 1f       	adc	r18, r19
 9ec:	84 9f       	mul	r24, r20
 9ee:	60 0d       	add	r22, r0
 9f0:	21 1d       	adc	r18, r1
 9f2:	82 2f       	mov	r24, r18
 9f4:	76 2f       	mov	r23, r22
 9f6:	6a 2f       	mov	r22, r26
 9f8:	11 24       	eor	r1, r1
 9fa:	9f 57       	subi	r25, 0x7F	; 127
 9fc:	50 40       	sbci	r21, 0x00	; 0
 9fe:	9a f0       	brmi	.+38     	; 0xa26 <__mulsf3_pse+0x88>
 a00:	f1 f0       	breq	.+60     	; 0xa3e <__mulsf3_pse+0xa0>
 a02:	88 23       	and	r24, r24
 a04:	4a f0       	brmi	.+18     	; 0xa18 <__mulsf3_pse+0x7a>
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	bb 1f       	adc	r27, r27
 a0c:	66 1f       	adc	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	50 40       	sbci	r21, 0x00	; 0
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__mulsf3_pse+0x64>
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	51 05       	cpc	r21, r1
 a1c:	80 f0       	brcs	.+32     	; 0xa3e <__mulsf3_pse+0xa0>
 a1e:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 a22:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	e4 f3       	brlt	.-8      	; 0xa22 <__mulsf3_pse+0x84>
 a2a:	98 3e       	cpi	r25, 0xE8	; 232
 a2c:	d4 f3       	brlt	.-12     	; 0xa22 <__mulsf3_pse+0x84>
 a2e:	86 95       	lsr	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b7 95       	ror	r27
 a36:	f7 95       	ror	r31
 a38:	e7 95       	ror	r30
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	c1 f7       	brne	.-16     	; 0xa2e <__mulsf3_pse+0x90>
 a3e:	fe 2b       	or	r31, r30
 a40:	88 0f       	add	r24, r24
 a42:	91 1d       	adc	r25, r1
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <__divmodhi4>:
 a4c:	97 fb       	bst	r25, 7
 a4e:	07 2e       	mov	r0, r23
 a50:	16 f4       	brtc	.+4      	; 0xa56 <__divmodhi4+0xa>
 a52:	00 94       	com	r0
 a54:	07 d0       	rcall	.+14     	; 0xa64 <__divmodhi4_neg1>
 a56:	77 fd       	sbrc	r23, 7
 a58:	09 d0       	rcall	.+18     	; 0xa6c <__divmodhi4_neg2>
 a5a:	0e 94 40 05 	call	0xa80	; 0xa80 <__udivmodhi4>
 a5e:	07 fc       	sbrc	r0, 7
 a60:	05 d0       	rcall	.+10     	; 0xa6c <__divmodhi4_neg2>
 a62:	3e f4       	brtc	.+14     	; 0xa72 <__divmodhi4_exit>

00000a64 <__divmodhi4_neg1>:
 a64:	90 95       	com	r25
 a66:	81 95       	neg	r24
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__divmodhi4_neg2>:
 a6c:	70 95       	com	r23
 a6e:	61 95       	neg	r22
 a70:	7f 4f       	sbci	r23, 0xFF	; 255

00000a72 <__divmodhi4_exit>:
 a72:	08 95       	ret

00000a74 <__tablejump2__>:
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	05 90       	lpm	r0, Z+
 a7a:	f4 91       	lpm	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	09 94       	ijmp

00000a80 <__udivmodhi4>:
 a80:	aa 1b       	sub	r26, r26
 a82:	bb 1b       	sub	r27, r27
 a84:	51 e1       	ldi	r21, 0x11	; 17
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <__udivmodhi4_ep>

00000a88 <__udivmodhi4_loop>:
 a88:	aa 1f       	adc	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	a6 17       	cp	r26, r22
 a8e:	b7 07       	cpc	r27, r23
 a90:	10 f0       	brcs	.+4      	; 0xa96 <__udivmodhi4_ep>
 a92:	a6 1b       	sub	r26, r22
 a94:	b7 0b       	sbc	r27, r23

00000a96 <__udivmodhi4_ep>:
 a96:	88 1f       	adc	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	5a 95       	dec	r21
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <__udivmodhi4_loop>
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	bc 01       	movw	r22, r24
 aa4:	cd 01       	movw	r24, r26
 aa6:	08 95       	ret

00000aa8 <_exit>:
 aa8:	f8 94       	cli

00000aaa <__stop_program>:
 aaa:	ff cf       	rjmp	.-2      	; 0xaaa <__stop_program>
