
todojuntoprueba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a0  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000162  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  78:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <system_setup>:
// I/O Function to general setting initial system.
void system_setup(void)
{
                                           	///////////////////////////////    IN SETTING    ///////////////////////////////
	//Set PB.0 as Input, THE PUSHBUTTON_00 IS CONNECTED.
	DDRB |= (1<<DDB0);
  80:	20 9a       	sbi	0x04, 0	; 4
	
	//Set low for High Impedance PB.0 -> D8.- 10K RESISTOR CONNECTED.
	PORTB = BIT_OFF(PORTB,0);
  82:	85 b1       	in	r24, 0x05	; 5
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	85 b9       	out	0x05, r24	; 5
  88:	85 b9       	out	0x05, r24	; 5
	
	                                      ///////////////////////////////    OUT SETTING    ///////////////////////////////
	// Set PC.4 PC.5 as output
	DDRC |= (1<<DDC4) | (1<<DDC5); // 0010 0000 (1<<4)
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	80 63       	ori	r24, 0x30	; 48
  8e:	87 b9       	out	0x07, r24	; 7
	
	//Set PC.4 PC.5 initial Low (cero).
	PORTC =  BIT_OFF(PORTC,4) | BIT_OFF(PORTC,5); // 0000 0000
  90:	88 b1       	in	r24, 0x08	; 8
  92:	28 2f       	mov	r18, r24
  94:	2f 7e       	andi	r18, 0xEF	; 239
  96:	28 b9       	out	0x08, r18	; 8
  98:	98 b1       	in	r25, 0x08	; 8
  9a:	89 2f       	mov	r24, r25
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	88 b9       	out	0x08, r24	; 8
  a0:	82 2b       	or	r24, r18
  a2:	88 b9       	out	0x08, r24	; 8
  a4:	08 95       	ret

000000a6 <delay_loop_counter_1_SEC>:
	
}

 // Function to delay loop counter 1 Sec with Duty Cycle 75% (0.25 Off , 0.75 On).
bool delay_loop_counter_1_SEC(uint8_t* counter_1, uint8_t top_count_025_sec, uint8_t top_count_075_sec )
{
  a6:	fc 01       	movw	r30, r24
	uint8_t top_count_01_sec = (top_count_075_sec + top_count_025_sec);
	
       //Checking the counter is equal to top count 025 ( 50 = 25mSec).
	  if ( *counter_1 == top_count_025_sec)
  a8:	90 81       	ld	r25, Z
  aa:	69 13       	cpse	r22, r25
  ac:	09 c0       	rjmp	.+18     	; 0xc0 <delay_loop_counter_1_SEC+0x1a>
	  {
		  BIT_TOGGLE (PORTC,5);
  ae:	98 b1       	in	r25, 0x08	; 8
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	89 27       	eor	r24, r25
  b4:	88 b9       	out	0x08, r24	; 8
		  *counter_1 = *counter_1 + 1; //Increment counter and return bool value True.
  b6:	80 81       	ld	r24, Z
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 83       	st	Z, r24
		  return true;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	08 95       	ret
	  }
	    //
	  else if (*counter_1 >= top_count_025_sec && *counter_1 < top_count_075_sec) {
  c0:	96 17       	cp	r25, r22
  c2:	30 f0       	brcs	.+12     	; 0xd0 <delay_loop_counter_1_SEC+0x2a>
  c4:	94 17       	cp	r25, r20
  c6:	20 f4       	brcc	.+8      	; 0xd0 <delay_loop_counter_1_SEC+0x2a>
		  
		  *counter_1 = *counter_1 + 1;
  c8:	9f 5f       	subi	r25, 0xFF	; 255
  ca:	90 83       	st	Z, r25
		  return false;
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret
	  }
	  
	  else if (*counter_1 >= top_count_01_sec)
  d0:	64 0f       	add	r22, r20
  d2:	96 17       	cp	r25, r22
  d4:	38 f0       	brcs	.+14     	; 0xe4 <delay_loop_counter_1_SEC+0x3e>
	   {
		  BIT_TOGGLE (PORTC,5);
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	89 27       	eor	r24, r25
  dc:	88 b9       	out	0x08, r24	; 8
		  *counter_1 = 0; //Reset counter and return bool value True.
  de:	10 82       	st	Z, r1
		  return true;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	08 95       	ret
	  }

	  else
	  {    //Increment counter, if the top count 025 not reached.
		  *counter_1 = *counter_1 + 1;
  e4:	9f 5f       	subi	r25, 0xFF	; 255
  e6:	90 83       	st	Z, r25
		  return false;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	  }
}
  ea:	08 95       	ret

000000ec <delay_loop_counter_4_SEC>:
	 
bool delay_loop_counter_4_SEC(uint16_t* counter_04, uint16_t top_count_04_sec)
{
	// Checking  the count has reached top (800 = 4sec).
	if (*counter_04 >= top_count_04_sec)
  ec:	fc 01       	movw	r30, r24
  ee:	20 81       	ld	r18, Z
  f0:	31 81       	ldd	r19, Z+1	; 0x01
  f2:	26 17       	cp	r18, r22
  f4:	37 07       	cpc	r19, r23
  f6:	20 f0       	brcs	.+8      	; 0x100 <delay_loop_counter_4_SEC+0x14>
	{
		// Reset counter.
		*counter_04 = 0;
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
		return true;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret
	}
	else
	{
		// if the top count not reached, Increment counter.
		*counter_04 = *counter_04 + 1;
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	31 83       	std	Z+1, r19	; 0x01
 108:	20 83       	st	Z, r18
		return false;
 10a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x6>
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	uint8_t blink_delay_loop_count_01 = 0; //Variable to store count to 1 sec (200 counts @ 5 mSec)
 11a:	19 82       	std	Y+1, r1	; 0x01
	uint16_t blink_delay_loop_count_04 = 0; //Variable to store count to 4 sec (800 counts @ 5 mSec)
 11c:	1b 82       	std	Y+3, r1	; 0x03
 11e:	1a 82       	std	Y+2, r1	; 0x02

	// Init system
	system_setup();
 120:	0e 94 40 00 	call	0x80	; 0x80 <system_setup>
			else {
					// Checking time to blink LED_2 (Blue) Connected in PC.4
					if (delay_loop_counter_4_SEC(&blink_delay_loop_count_04, _4_SEC_COUNT))
					{
						// Toggle Led #1
						BIT_TOGGLE (PORTC,4); // 4 sec on and 4 sec off , so T = 8 , f = 1/T = 1/8 = 0.125 Hz. LED Blinking at 0.125 Hz.
 124:	10 e1       	ldi	r17, 0x10	; 16
	system_setup();
	
	while (1)
	{
		
		delay_loop_counter_1_SEC(&blink_delay_loop_count_01, _025_SEC_COUNT, _075_SEC_COUNT);
 126:	46 e9       	ldi	r20, 0x96	; 150
 128:	62 e3       	ldi	r22, 0x32	; 50
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_loop_counter_1_SEC>
			//Toggle LED
			BIT_TOGGLE (PORTC,5);
		  }*/
	
			// Checking PIN B.0 is pressed.
		  if ((PINB & (1 << PINB0)) != 0)
 132:	18 9b       	sbis	0x03, 0	; 3
 134:	0a c0       	rjmp	.+20     	; 0x14a <main+0x3c>
			{
				
				//Reset counters.
				 blink_delay_loop_count_01 = 0;
 136:	19 82       	std	Y+1, r1	; 0x01
				 blink_delay_loop_count_04 = 0;
 138:	1b 82       	std	Y+3, r1	; 0x03
 13a:	1a 82       	std	Y+2, r1	; 0x02
		        
				delay_loop_counter_1_SEC(&blink_delay_loop_count_01, _025_SEC_COUNT, _075_SEC_COUNT);
 13c:	46 e9       	ldi	r20, 0x96	; 150
 13e:	62 e3       	ldi	r22, 0x32	; 50
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_loop_counter_1_SEC>
 148:	0b c0       	rjmp	.+22     	; 0x160 <main+0x52>
				 BIT_TOGGLE(PORTC,4) , BIT_TOGGLE(PORTC,5);*/
			}
			
			else {
					// Checking time to blink LED_2 (Blue) Connected in PC.4
					if (delay_loop_counter_4_SEC(&blink_delay_loop_count_04, _4_SEC_COUNT))
 14a:	60 e2       	ldi	r22, 0x20	; 32
 14c:	73 e0       	ldi	r23, 0x03	; 3
 14e:	ce 01       	movw	r24, r28
 150:	02 96       	adiw	r24, 0x02	; 2
 152:	0e 94 76 00 	call	0xec	; 0xec <delay_loop_counter_4_SEC>
 156:	88 23       	and	r24, r24
 158:	19 f0       	breq	.+6      	; 0x160 <main+0x52>
					{
						// Toggle Led #1
						BIT_TOGGLE (PORTC,4); // 4 sec on and 4 sec off , so T = 8 , f = 1/T = 1/8 = 0.125 Hz. LED Blinking at 0.125 Hz.
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	81 27       	eor	r24, r17
 15e:	88 b9       	out	0x08, r24	; 8
					}
			}
		__builtin_avr_delay_cycles(DELAY_05_mSEC); // Principal Clock ( Master Clock )
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	9e e4       	ldi	r25, 0x4E	; 78
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x56>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x5c>
 16a:	00 00       	nop
	}
 16c:	dc cf       	rjmp	.-72     	; 0x126 <main+0x18>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
