
03_ALL_COMBINED_PB_2_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c3  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a0  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019c  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <system_setup>:
  // I/O Function to general setting initial system.
void system_setup(void)
{
                                           	///////////////////////////////    IN SETTING    ///////////////////////////////
											   
	DDRB &= ~(1<<DDB0);     // Set PB.0 as Input, THE PUSHBUTTON_00 IS CONNECTED.
  80:	20 98       	cbi	0x04, 0	; 4
	PORTB = BIT_OFF(PORTB,0); 	// Set low for High Impedance PB.0 -> D8.- 10K RESISTOR CONNECTED.
  82:	85 b1       	in	r24, 0x05	; 5
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	85 b9       	out	0x05, r24	; 5
  88:	85 b9       	out	0x05, r24	; 5
	
	                                       ///////////////////////////////    OUT SETTING    ///////////////////////////////
	
	DDRC |= (1<<DDC4) | (1<<DDC5);        // Set PC.4 PC.5 as output
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	80 63       	ori	r24, 0x30	; 48
  8e:	87 b9       	out	0x07, r24	; 7
	PORTC =  BIT_OFF(PORTC,4) | BIT_OFF(PORTC,5);   // Set PC.4 PC.5 initial Low ('0').
  90:	88 b1       	in	r24, 0x08	; 8
  92:	28 2f       	mov	r18, r24
  94:	2f 7e       	andi	r18, 0xEF	; 239
  96:	28 b9       	out	0x08, r18	; 8
  98:	98 b1       	in	r25, 0x08	; 8
  9a:	89 2f       	mov	r24, r25
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	88 b9       	out	0x08, r24	; 8
  a0:	82 2b       	or	r24, r18
  a2:	88 b9       	out	0x08, r24	; 8
  a4:	08 95       	ret

000000a6 <delay_counter_led_2>:

                                            ///////////////////////////////    FUNCTIONS   ///////////////////////////////
											
//1. Function to delay counter 4 Sec with Duty Cycle 50% (4 sec Off , 4 sec On).
bool delay_counter_led_2(uint8_t* counter, uint8_t top_count_sec) 
{
  a6:	fc 01       	movw	r30, r24
	if (*counter >= top_count_sec) // Checking  the count has reached top (800 counts = 4sec).
  a8:	90 81       	ld	r25, Z
  aa:	96 17       	cp	r25, r22
  ac:	18 f0       	brcs	.+6      	; 0xb4 <delay_counter_led_2+0xe>
	{
		*counter = 0;  // Reset counter and return bool value True.
  ae:	10 82       	st	Z, r1
		return true;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
	}
	else          //This condition is for the top count (4 sec) not reached.
	{
		*counter = *counter + 1; // if the top count not reached, Increment count.
  b4:	9f 5f       	subi	r25, 0xFF	; 255
  b6:	90 83       	st	Z, r25
		return false;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  ba:	08 95       	ret

000000bc <delay_counter_led_1>:

 // 2. Function to delay loop counter 1 Sec with Duty Cycle 75% (0.25 Off , 0.75 On).
 bool delay_counter_led_1 (uint8_t* counter_1, uint8_t top_count_status_off, uint8_t top_count_status_on )
 {
  bc:	fc 01       	movw	r30, r24
	 uint8_t top_count_01_sec = (top_count_status_on + top_count_status_off); // Variable to store 1 sec top count.
	 
	 //Checking the counter is equal to top count 025 ( 50 = 25mSec).
	 if ( *counter_1 == top_count_status_off)
  be:	90 81       	ld	r25, Z
  c0:	69 13       	cpse	r22, r25
  c2:	04 c0       	rjmp	.+8      	; 0xcc <delay_counter_led_1+0x10>
	 {
		 *counter_1 = *counter_1 + 1; //Increment counter and return bool value True.
  c4:	6f 5f       	subi	r22, 0xFF	; 255
  c6:	60 83       	st	Z, r22
		 return true;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
	 }
	 //
	 else if (*counter_1 > top_count_status_off && *counter_1 < top_count_status_on)
  cc:	69 17       	cp	r22, r25
  ce:	30 f4       	brcc	.+12     	; 0xdc <delay_counter_led_1+0x20>
  d0:	94 17       	cp	r25, r20
  d2:	20 f4       	brcc	.+8      	; 0xdc <delay_counter_led_1+0x20>
	  {
		  *counter_1 = *counter_1 + 1;
  d4:	9f 5f       	subi	r25, 0xFF	; 255
  d6:	90 83       	st	Z, r25
		 return false;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret
	 }
	 //
	 else if (*counter_1 == top_count_01_sec)
  dc:	64 0f       	add	r22, r20
  de:	69 13       	cpse	r22, r25
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <delay_counter_led_1+0x2c>
	 {
		 *counter_1 = 0; //Reset counter and return bool value True.
  e2:	10 82       	st	Z, r1
		 return true;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
	 }
	 else
	 {    //Increment counter, if the top count 025 not reached.
		 *counter_1 = *counter_1 + 1 ;
  e8:	9f 5f       	subi	r25, 0xFF	; 255
  ea:	90 83       	st	Z, r25
		 return false;
  ec:	80 e0       	ldi	r24, 0x00	; 0
	 }
  ee:	08 95       	ret

000000f0 <main>:
	PORTC =  BIT_OFF(PORTC,4) | BIT_OFF(PORTC,5);   // Set PC.4 PC.5 initial Low ('0').
	
}
                   ///// MAIN /////
int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	1f 92       	push	r1
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	uint8_t blink_delay_count_05 = 0; //Variable to store count to 05 sec (100 counts @ 5 mSec).
  fc:	19 82       	std	Y+1, r1	; 0x01
	uint8_t blink_delay_count_01 = 0; //Variable to store count to 1 sec (200 counts @ 5 mSec)
  fe:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t blink_delay_count_4 = 0; //Variable to store count to 4 sec (800 counts @ 5 mSec)
 100:	1b 82       	std	Y+3, r1	; 0x03

	// Initial system
	system_setup();
 102:	0e 94 40 00 	call	0x80	; 0x80 <system_setup>
	while (1)
	{
		if (delay_counter_led_1(&blink_delay_count_01, _025_SEC_COUNT, _075_SEC_COUNT)) // Checking time to blink LED_1 (White) Connected in PC.5
		  {
			 //Toggle LED_1
			BIT_TOGGLE (PORTC,5); // 0.25 sec Off and 0.75 sec On , so T = 1 , f = 1/T = 1/1 = 1 Hz. LED_1 Blinking at 1 Hz.
 106:	00 e2       	ldi	r16, 0x20	; 32
			 {       //This condition is for PIN B (PB.0) isn't pressed.
				 if (delay_counter_led_2(&blink_delay_count_4, _4_SEC_COUNT))  // Checking time to blink LED_2 (Blue) Connected in PC.4
				 {
					blink_delay_count_05 = 0;
					 // Toggle Led_2
					BIT_TOGGLE (PORTC,4); // 4 sec on and 4 sec off , so T = 8 , f = 1/T = 1/8 = 0.125 Hz. LED_2 Blinking at 0.125 Hz.
 108:	10 e1       	ldi	r17, 0x10	; 16
	// Initial system
	system_setup();
	
	while (1)
	{
		if (delay_counter_led_1(&blink_delay_count_01, _025_SEC_COUNT, _075_SEC_COUNT)) // Checking time to blink LED_1 (White) Connected in PC.5
 10a:	4e e1       	ldi	r20, 0x1E	; 30
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	ce 01       	movw	r24, r28
 110:	02 96       	adiw	r24, 0x02	; 2
 112:	0e 94 5e 00 	call	0xbc	; 0xbc <delay_counter_led_1>
 116:	88 23       	and	r24, r24
 118:	19 f0       	breq	.+6      	; 0x120 <main+0x30>
		  {
			 //Toggle LED_1
			BIT_TOGGLE (PORTC,5); // 0.25 sec Off and 0.75 sec On , so T = 1 , f = 1/T = 1/1 = 1 Hz. LED_1 Blinking at 1 Hz.
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	80 27       	eor	r24, r16
 11e:	88 b9       	out	0x08, r24	; 8
		  }
	
		if ((PINB & (1 << PINB0)) != 0) // Checking PIN B.0 is pressed.
 120:	18 9b       	sbis	0x03, 0	; 3
 122:	0c c0       	rjmp	.+24     	; 0x13c <main+0x4c>
		  {
		        if (delay_counter_led_2(&blink_delay_count_05, _050_SEC_COUNT))
 124:	64 e1       	ldi	r22, 0x14	; 20
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_counter_led_2>
 12e:	88 23       	and	r24, r24
 130:	81 f0       	breq	.+32     	; 0x152 <main+0x62>
		          {
			        blink_delay_count_4 = 0;
 132:	1b 82       	std	Y+3, r1	; 0x03
			         //Toggle Led_2
			        BIT_TOGGLE(PORTC,4); // 0.5 sec Off and 0.5 sec On , so T = 1 , f = 1/T = 1/1 = 1 Hz. LED_2 Blinking at 1 Hz.
 134:	88 b1       	in	r24, 0x08	; 8
 136:	81 27       	eor	r24, r17
 138:	88 b9       	out	0x08, r24	; 8
 13a:	0b c0       	rjmp	.+22     	; 0x152 <main+0x62>
			      }
		  }
			
			else
			 {       //This condition is for PIN B (PB.0) isn't pressed.
				 if (delay_counter_led_2(&blink_delay_count_4, _4_SEC_COUNT))  // Checking time to blink LED_2 (Blue) Connected in PC.4
 13c:	60 ea       	ldi	r22, 0xA0	; 160
 13e:	ce 01       	movw	r24, r28
 140:	03 96       	adiw	r24, 0x03	; 3
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_counter_led_2>
 146:	88 23       	and	r24, r24
 148:	21 f0       	breq	.+8      	; 0x152 <main+0x62>
				 {
					blink_delay_count_05 = 0;
 14a:	19 82       	std	Y+1, r1	; 0x01
					 // Toggle Led_2
					BIT_TOGGLE (PORTC,4); // 4 sec on and 4 sec off , so T = 8 , f = 1/T = 1/8 = 0.125 Hz. LED_2 Blinking at 0.125 Hz.
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	81 27       	eor	r24, r17
 150:	88 b9       	out	0x08, r24	; 8
				 }
			 }
		__builtin_avr_delay_cycles(DELAY_25_mSEC); // Principal Clock ( Master Clock )
 152:	2f e7       	ldi	r18, 0x7F	; 127
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x68>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x72>
 162:	00 00       	nop
	}
 164:	d2 cf       	rjmp	.-92     	; 0x10a <main+0x1a>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
