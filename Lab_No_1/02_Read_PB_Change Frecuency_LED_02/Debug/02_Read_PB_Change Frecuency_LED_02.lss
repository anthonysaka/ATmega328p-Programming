
02_Read_PB_Change Frecuency_LED_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000739  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000691  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000279  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000167d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000170d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <system_setup>:

// I/O Function to general setting initial system.   
void system_setup(void)
{                                        ///////////////////////////////    IN SETTING    ///////////////////////////////
	
	DDRB |= (1<<DDB0);     //Set PB.0 as Input, THE PUSHBUTTON_00 IS CONNECTED.
  80:	20 9a       	sbi	0x04, 0	; 4
	PORTB = BIT_OFF(PORTB,0);   //Set low for High Impedance PB.0 -> D8.- 10K RESISTOR CONNECTED.
  82:	85 b1       	in	r24, 0x05	; 5
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	85 b9       	out	0x05, r24	; 5
  88:	85 b9       	out	0x05, r24	; 5
	
                                           ///////////////////////////////    OUT SETTING    ///////////////////////////////
										   
	DDRC |= (1<<DDC4);  // Set Low PC.4 as output.
  8a:	3c 9a       	sbi	0x07, 4	; 7
	PORTC =  BIT_OFF(PORTC,4); //Set PC.4 initial Low ('0').
  8c:	88 b1       	in	r24, 0x08	; 8
  8e:	8f 7e       	andi	r24, 0xEF	; 239
  90:	88 b9       	out	0x08, r24	; 8
  92:	88 b9       	out	0x08, r24	; 8
  94:	08 95       	ret

00000096 <delay_counter_led>:
				
                                            ///////////////////////////////    FUNCTIONS   ///////////////////////////////
											
//1. Function to delay counter LEDs Sec with Duty Cycle 50%.
bool delay_counter_led (uint8_t* counter, uint8_t top_count_sec) 
{
  96:	fc 01       	movw	r30, r24
	if (*counter >= top_count_sec) // Checking  the count has reached top (800 counts = 4sec).
  98:	90 81       	ld	r25, Z
  9a:	96 17       	cp	r25, r22
  9c:	18 f0       	brcs	.+6      	; 0xa4 <delay_counter_led+0xe>
	{
		*counter = 0;  // Reset counter and return bool value True.
  9e:	10 82       	st	Z, r1
		return true;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	08 95       	ret
	}
	else                 //This condition is for the top count (4 sec) not reached.
	{
		*counter = *counter + 1; // if the top count not reached, Increment count.
  a4:	9f 5f       	subi	r25, 0xFF	; 255
  a6:	90 83       	st	Z, r25
		return false;
  a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  aa:	08 95       	ret

000000ac <main>:
	PORTC =  BIT_OFF(PORTC,4); //Set PC.4 initial Low ('0').
}

                   ///// MAIN /////
int main(void)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <main+0x6>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	// Initial system
	system_setup();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <system_setup>
	
	uint8_t blink_delay_count_05 = 0; //Variable to store count to 05 sec (20 counts @ 25 mSec).
  ba:	19 82       	std	Y+1, r1	; 0x01
    uint8_t blink_delay_count_4 = 0; //Variable to store count to 4 sec (160 counts @ 25 mSec).
  bc:	1a 82       	std	Y+2, r1	; 0x02
		{          //This condition is for PIN B (PB.0) isn't pressed.
		    if (delay_counter_led(&blink_delay_count_4, _4_SEC_COUNT))  // Checking time to blink LED_2 (Blue) Connected in PC.4
			{
				blink_delay_count_05 = 0;
				// Toggle Led_2
				BIT_TOGGLE (PORTC,4); // 4 sec Off and 4 sec On , so T = 8 , f = 1/T = 1/8 = 0.125 Hz. LED Blinking at 0.125 Hz.
  be:	10 e1       	ldi	r17, 0x10	; 16
	uint8_t blink_delay_count_05 = 0; //Variable to store count to 05 sec (20 counts @ 25 mSec).
    uint8_t blink_delay_count_4 = 0; //Variable to store count to 4 sec (160 counts @ 25 mSec).

	while (1)
	{
		if ((PINB & (1 << PINB0)) != 0)  // Checking PIN B (PB.0) is pressed.
  c0:	18 9b       	sbis	0x03, 0	; 3
  c2:	0c c0       	rjmp	.+24     	; 0xdc <main+0x30>
		{
	           if (delay_counter_led(&blink_delay_count_05, _050_SEC_COUNT))
  c4:	64 e1       	ldi	r22, 0x14	; 20
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <delay_counter_led>
  ce:	88 23       	and	r24, r24
  d0:	81 f0       	breq	.+32     	; 0xf2 <main+0x46>
	           {
				   blink_delay_count_4 = 0;
  d2:	1a 82       	std	Y+2, r1	; 0x02
				   //Toggle Led_2
				   BIT_TOGGLE(PORTC,4); // 0.5 sec Off and 0.5 sec On , so T = 1 , f = 1/T = 1/1 = 1 Hz. LED Blinking at 1 Hz.
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	81 27       	eor	r24, r17
  d8:	88 b9       	out	0x08, r24	; 8
  da:	0b c0       	rjmp	.+22     	; 0xf2 <main+0x46>
	           }
		}
		else
		{          //This condition is for PIN B (PB.0) isn't pressed.
		    if (delay_counter_led(&blink_delay_count_4, _4_SEC_COUNT))  // Checking time to blink LED_2 (Blue) Connected in PC.4
  dc:	60 ea       	ldi	r22, 0xA0	; 160
  de:	ce 01       	movw	r24, r28
  e0:	02 96       	adiw	r24, 0x02	; 2
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <delay_counter_led>
  e6:	88 23       	and	r24, r24
  e8:	21 f0       	breq	.+8      	; 0xf2 <main+0x46>
			{
				blink_delay_count_05 = 0;
  ea:	19 82       	std	Y+1, r1	; 0x01
				// Toggle Led_2
				BIT_TOGGLE (PORTC,4); // 4 sec Off and 4 sec On , so T = 8 , f = 1/T = 1/8 = 0.125 Hz. LED Blinking at 0.125 Hz.
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	81 27       	eor	r24, r17
  f0:	88 b9       	out	0x08, r24	; 8
			}
		}
		__builtin_avr_delay_cycles(DELAY_25_mSEC); // Principal Clock (Master Clock).
  f2:	2f e7       	ldi	r18, 0x7F	; 127
  f4:	88 e3       	ldi	r24, 0x38	; 56
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x4c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x56>
 102:	00 00       	nop
	}
 104:	dd cf       	rjmp	.-70     	; 0xc0 <main+0x14>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
