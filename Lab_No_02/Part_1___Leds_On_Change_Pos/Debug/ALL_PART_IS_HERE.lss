
ALL_PART_IS_HERE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c24  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000502  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054d  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e7  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <system_setup>:
  // I/O Function to general setting initial system.
  void system_setup(void)
  {
	  ///////////////////////////////    IN SETTING    ///////////////////////////////
	  
	  DDRB &= ~(1<<DDB0);    // Set PB.0 as Input, THE PUSHBUTTON_00 IS CONNECTED. --> D8 (Decrement)
  80:	20 98       	cbi	0x04, 0	; 4
	  DDRB &= ~(1<<DDB1);    // Set PB.1 as Input, THE PUSHBUTTON_01 IS CONNECTED. --> D9 (Increment)
  82:	21 98       	cbi	0x04, 1	; 4
	
	  PORTB = BIT_OFF(PORTB,0); 	// Set low for High Impedance PB.0 -> D8.- 10K RESISTOR CONNECTED.
  84:	85 b1       	in	r24, 0x05	; 5
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	85 b9       	out	0x05, r24	; 5
  8a:	85 b9       	out	0x05, r24	; 5
	  PORTB = BIT_OFF(PORTB,1); 	// Set low for High Impedance PB.1 -> D9.- 10K RESISTOR CONNECTED.
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	8d 7f       	andi	r24, 0xFD	; 253
  90:	85 b9       	out	0x05, r24	; 5
  92:	85 b9       	out	0x05, r24	; 5
	  
	  ///////////////////////////////    OUT SETTING    ///////////////////////////////
	  
	  DDRC |=  (1<<DDC1) | (1<<DDC2) | (1<<DDC3) | (1<<DDC4) | (1<<DDC5);    // Set PC.1 - PC.5 as output. 
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8e 63       	ori	r24, 0x3E	; 62
  98:	87 b9       	out	0x07, r24	; 7
	  DDRB |= (1<<DDB5);  //LED#9 -> PB5
  9a:	25 9a       	sbi	0x04, 5	; 4
	 
	  
	  PORTC =  BIT_OFF(PORTC,1) | BIT_OFF(PORTC,2) | BIT_OFF(PORTC,3) | BIT_OFF(PORTC,4) | BIT_OFF(PORTC,5);   // Set PC.1 - PC.5 initial Low ('0').
  9c:	48 b1       	in	r20, 0x08	; 8
  9e:	54 2f       	mov	r21, r20
  a0:	5d 7f       	andi	r21, 0xFD	; 253
  a2:	58 b9       	out	0x08, r21	; 8
  a4:	98 b1       	in	r25, 0x08	; 8
  a6:	49 2f       	mov	r20, r25
  a8:	4b 7f       	andi	r20, 0xFB	; 251
  aa:	48 b9       	out	0x08, r20	; 8
  ac:	98 b1       	in	r25, 0x08	; 8
  ae:	39 2f       	mov	r19, r25
  b0:	37 7f       	andi	r19, 0xF7	; 247
  b2:	38 b9       	out	0x08, r19	; 8
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	29 2f       	mov	r18, r25
  b8:	2f 7e       	andi	r18, 0xEF	; 239
  ba:	28 b9       	out	0x08, r18	; 8
  bc:	98 b1       	in	r25, 0x08	; 8
  be:	89 2f       	mov	r24, r25
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	88 b9       	out	0x08, r24	; 8
  c4:	45 2b       	or	r20, r21
  c6:	34 2b       	or	r19, r20
  c8:	23 2b       	or	r18, r19
  ca:	82 2b       	or	r24, r18
  cc:	88 b9       	out	0x08, r24	; 8
	  PORTB = BIT_OFF(PORTB,5) ; // Set PB.5 initial Low ('0').
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <delay_counter_led_9>:
      
                                 ///////////////////////////////    FUNCTIONS   ///////////////////////////////
												
// 1. Function to delay counter X Sec with Duty Cycle 50%.													
bool delay_counter_led_9(uint8_t* counter_pos, uint8_t top_count_sec)
{
  d8:	fc 01       	movw	r30, r24
	if (*counter_pos >= top_count_sec) // Checking  the count has reached top.
  da:	90 81       	ld	r25, Z
  dc:	96 17       	cp	r25, r22
  de:	18 f0       	brcs	.+6      	; 0xe6 <delay_counter_led_9+0xe>
	{
		*counter_pos = 0;  // Reset counter and return bool value True.
  e0:	10 82       	st	Z, r1
		return true;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
	}
	else      //This condition is for the top count not reached.
	{
		*counter_pos = *counter_pos + 1; // if the top count not reached, Increment count.
  e6:	9f 5f       	subi	r25, 0xFF	; 255
  e8:	90 83       	st	Z, r25
		return false;
  ea:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  ec:	08 95       	ret

000000ee <pb0_read>:

// 2. Function to Read PB #0 (PB.0) 'Down count', and return true if pressed.
bool pb0_read(void)
{
	return (PINB & (1 << PORTB0)) != 0;
  ee:	83 b1       	in	r24, 0x03	; 3
}
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	08 95       	ret

000000f4 <pb1_read>:

// 3. Function to Read PB #0 (PB.1) 'Up count', and return true if pressed.
bool pb1_read(void)
{
	// Read PB #1 (PB.1) 'Up count', and return true if pressed.
	return (PINB & (1 << PORTB1)) != 0;
  f4:	83 b1       	in	r24, 0x03	; 3
}
  f6:	86 95       	lsr	r24
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	08 95       	ret

000000fc <main>:
	
  }
  
                               ////////// MAIN //////////
int main(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	2f 97       	sbiw	r28, 0x0f	; 15
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
    // Initial System.
    system_setup();
 110:	0e 94 40 00 	call	0x80	; 0x80 <system_setup>
    
    uint8_t blink_delay_count_05 = 0; //Variable to store count to 05 sec (100 counts @ 5 mSec).
 114:	19 82       	std	Y+1, r1	; 0x01

    pb_debouncer_t pb1_up; // Create a variable to debouncer.
	pb_debouncer_t pb0_down; // Create a variable to debouncer.
	
 
    pbd_init(&pb1_up, PBD_HIGH_COUNT, PBD_LOW_COUNT, false);  //Initing Debouncer objects.
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	48 e2       	ldi	r20, 0x28	; 40
 11a:	68 e2       	ldi	r22, 0x28	; 40
 11c:	ce 01       	movw	r24, r28
 11e:	02 96       	adiw	r24, 0x02	; 2
 120:	0e 94 c8 00 	call	0x190	; 0x190 <pbd_init>
    while (1) 
    {
	    if (delay_counter_led_9(&blink_delay_count_05,_050_SEC_COUNT))// Checking time to blink LED_9 (Blue) 
		{
			//Toggle Led_9.
			BIT_TOGGLE(PORTB,5);// 0.50 sec Off and 0.50 sec On , so T = 1 , f = 1/T = 1/1 = 1 Hz. LED_9 Blinking at 1 Hz.
 124:	68 94       	set
 126:	ff 24       	eor	r15, r15
 128:	f5 f8       	bld	r15, 5
    pbd_init(&pb1_up, PBD_HIGH_COUNT, PBD_LOW_COUNT, false);  //Initing Debouncer objects.
    
	                                      /////***** EXECUTION BLOCK (PRINCIPAL EXECUTION) - Backbone - *****/////
    while (1) 
    {
	    if (delay_counter_led_9(&blink_delay_count_05,_050_SEC_COUNT))// Checking time to blink LED_9 (Blue) 
 12a:	64 e6       	ldi	r22, 0x64	; 100
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 6c 00 	call	0xd8	; 0xd8 <delay_counter_led_9>
 134:	88 23       	and	r24, r24
 136:	19 f0       	breq	.+6      	; 0x13e <main+0x42>
		{
			//Toggle Led_9.
			BIT_TOGGLE(PORTB,5);// 0.50 sec Off and 0.50 sec On , so T = 1 , f = 1/T = 1/1 = 1 Hz. LED_9 Blinking at 1 Hz.
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8f 25       	eor	r24, r15
 13c:	85 b9       	out	0x05, r24	; 5
		}
		
		bool pb1_up_count_raw = pb1_read(); // Read raw PB #1 input (PB Raw Up Count).
 13e:	0e 94 7a 00 	call	0xf4	; 0xf4 <pb1_read>
 142:	08 2f       	mov	r16, r24
		bool pb0_down_count_raw = pb0_read(); // Read raw PB #0 input (PB Raw Down Count).
 144:	0e 94 77 00 	call	0xee	; 0xee <pb0_read>
 148:	18 2f       	mov	r17, r24
		
		pbd_process(&pb1_up, pb1_up_count_raw); // Debouncer PB #1 'Up count' and 
 14a:	60 2f       	mov	r22, r16
 14c:	ce 01       	movw	r24, r28
 14e:	02 96       	adiw	r24, 0x02	; 2
 150:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pbd_process>
		pbd_process(&pb0_down, pb0_down_count_raw); // Debouncer PB #0 'Down count' and get stable value.
 154:	61 2f       	mov	r22, r17
 156:	ce 01       	movw	r24, r28
 158:	09 96       	adiw	r24, 0x09	; 9
 15a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pbd_process>
		
		bool pb1_up_count_edge = pbd_get_rising_edge(&pb1_up,false); //get rising edge (flanco pos) to pb1_up_count.
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	02 96       	adiw	r24, 0x02	; 2
 164:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <pbd_get_rising_edge>
		bool pb0_down_count_edge = pbd_get_rising_edge(&pb0_down,false); //get rising edge (flanco pos) to pb0_down_count.
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	09 96       	adiw	r24, 0x09	; 9
 16e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <pbd_get_rising_edge>
		
		bool pb1_up_stable = pbd_get_stable_value(&pb1_up);
 172:	ce 01       	movw	r24, r28
 174:	02 96       	adiw	r24, 0x02	; 2
 176:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <pbd_get_stable_value>
	    bool pb0_down_stable = pbd_get_stable_value(&pb0_down);
 17a:	ce 01       	movw	r24, r28
 17c:	09 96       	adiw	r24, 0x09	; 9
 17e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <pbd_get_stable_value>
               /////***** PART 3 *****/////
			   
		 //    show_leds_3_process(&count_limit, pb1_up_count_edge, pb0_down_count_edge, pb1_up_stable, pb0_down_stable);
		

		__builtin_avr_delay_cycles(DELAY_5_mSEC); // Principal Clock ( Master Clock )
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	9e e4       	ldi	r25, 0x4E	; 78
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x8a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x90>
 18c:	00 00       	nop
    }
 18e:	cd cf       	rjmp	.-102    	; 0x12a <main+0x2e>

00000190 <pbd_init>:

bool pbd_get_raw_input(pb_debouncer_t* pbd)
{
	// Return the stable filtered value
	return pbd->raw_input;
}
 190:	fc 01       	movw	r30, r24
 192:	60 83       	st	Z, r22
 194:	41 83       	std	Z+1, r20	; 0x01
 196:	12 82       	std	Z+2, r1	; 0x02
 198:	23 83       	std	Z+3, r18	; 0x03
 19a:	24 83       	std	Z+4, r18	; 0x04
 19c:	15 82       	std	Z+5, r1	; 0x05
 19e:	16 82       	std	Z+6, r1	; 0x06
 1a0:	08 95       	ret

000001a2 <pbd_process>:
 1a2:	fc 01       	movw	r30, r24
 1a4:	15 82       	std	Z+5, r1	; 0x05
 1a6:	16 82       	std	Z+6, r1	; 0x06
 1a8:	64 83       	std	Z+4, r22	; 0x04
 1aa:	83 81       	ldd	r24, Z+3	; 0x03
 1ac:	68 13       	cpse	r22, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <pbd_process+0x12>
 1b0:	12 82       	std	Z+2, r1	; 0x02
 1b2:	08 95       	ret
 1b4:	82 81       	ldd	r24, Z+2	; 0x02
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	66 23       	and	r22, r22
 1ba:	41 f0       	breq	.+16     	; 0x1cc <pbd_process+0x2a>
 1bc:	90 81       	ld	r25, Z
 1be:	89 17       	cp	r24, r25
 1c0:	68 f0       	brcs	.+26     	; 0x1dc <pbd_process+0x3a>
 1c2:	12 82       	std	Z+2, r1	; 0x02
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	83 83       	std	Z+3, r24	; 0x03
 1c8:	85 83       	std	Z+5, r24	; 0x05
 1ca:	08 95       	ret
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 17       	cp	r24, r25
 1d0:	28 f0       	brcs	.+10     	; 0x1dc <pbd_process+0x3a>
 1d2:	12 82       	std	Z+2, r1	; 0x02
 1d4:	13 82       	std	Z+3, r1	; 0x03
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	86 83       	std	Z+6, r24	; 0x06
 1da:	08 95       	ret
 1dc:	82 83       	std	Z+2, r24	; 0x02
 1de:	08 95       	ret

000001e0 <pbd_get_stable_value>:
 1e0:	fc 01       	movw	r30, r24
 1e2:	83 81       	ldd	r24, Z+3	; 0x03
 1e4:	08 95       	ret

000001e6 <pbd_get_rising_edge>:
bool pbd_get_rising_edge(pb_debouncer_t* pbd, bool clear)
{
 1e6:	fc 01       	movw	r30, r24
	// Get rising edge flag
	bool rising_edge = pbd->rising_edge;
 1e8:	85 81       	ldd	r24, Z+5	; 0x05
	
	// Clear flag if asked
	if (clear)
 1ea:	61 11       	cpse	r22, r1
	pbd->rising_edge = false;
 1ec:	15 82       	std	Z+5, r1	; 0x05
	
	// Return rising edge flag
	return rising_edge;
}
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
